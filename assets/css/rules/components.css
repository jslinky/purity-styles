:where(html) {
  --root-areas:
  "main-header main-header main-header"
  "main-area main-area main-area"
  "main-footer main-footer main-footer";
}
:where(html):has(.admin-header) {
  --root-areas: "admin-header admin-header admin-header"
  "main-header main-header main-header"
  "main-area main-area main-area"
  "main-footer main-footer main-footer";
}
:where(html):has(.main-aside:not(:empty)) {
  --end-col: 0;
  --root-areas:
  "main-header main-header main-header"
  "inline-start-area main-area inline-end-area"
  "main-footer main-footer main-footer";
}

@layer purity.components {
  #__nuxt {
    display: grid;
    grid-template-areas: var(--root-areas);
    grid-template-columns: var(--grid-wrapper-columns);
  }
  .main-header {
    display: grid;
    grid-area: main-header;
    grid-template-areas: "inline-start-block-start-area block-start-area inline-end-block-start-area" "inline-start-area main-area inline-end-area" "inline-start-block-end-area block-end-area inline-end-block-end-area";
    grid-auto-flow: column;
    grid-template-columns: var(--grid-wrapper-columns);
    z-index: 1;
  }
  :where(.main-header__inner) > * {
    grid-area: main-area;
  }
  .main-header__inner {
    display: contents;
  }
  :where(html):has(:not(.main-aside)) .main-area {
    display: grid;
    grid-template-columns: var(--grid-wrapper-columns);
  }
  :where(html):has(:not(.main-aside)) .main-area > * {
    grid-column: 2/2;
  }
  .main-area {
    grid-area: main-area;
  }
  .main-aside {
    grid-area: inline-start-area;
  }
  @keyframes menu-show-from-left {
    0% {
      display: none;
    }
    1% {
      display: grid;
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(0%);
    }
  }
  @keyframes menu-hide-from-left {
    0% {
      display: grid;
      transform: translateX(0%);
    }
    99% {
      display: none;
    }
    100% {
      transform: translateX(-100%);
    }
  }
  .navigation {
    margin-block: 0;
    padding: max(var(--space-xs), var(--spacing-1));
    display: grid;
    grid-template-columns: auto 1fr;
    gap: var(--spacing-gutter) var(--spacing-gutter-xl);
    align-items: center;
    flex: 1 1 auto;
    grid-area: main-area;
  }
  .navigation:has(> *:only-child) {
    grid-template-columns: 1fr;
  }
  .navigation:has(> *:nth-child(3):last-child) {
    grid-template-columns: auto 1fr auto;
  }
  .navigation[data-nav-layout=stacked] .navigation__menu {
    grid-column: 1/-1;
  }
  .navigation[data-nav-layout=stacked-centered] .navigation__brand {
    grid-column: 1/-1;
    justify-content: center;
  }
  .navigation[data-nav-layout=stacked-centered] .navigation__menu {
    grid-column: 1/-1;
    justify-content: center;
  }
  .navigation[data-nav-layout=centered] .navigation__menu {
    justify-content: center;
  }
  .navigation a:not(.btn) {
    text-decoration: none;
    padding: var(--spacing-rel-2) var(--spacing-rel-2_5);
    width: fit-content;
    color: var(--color-primary);
    border-radius: min(var(--radius), var(--space-2xs));
  }
  .navigation a:not(.btn) span {
    border-bottom: 2px solid transparent;
  }
  @media (hover) and (pointer: coarse) {
    .navigation a:not(.btn):hover {
      background-color: var(--color-grey-1);
    }
  }
  :is(.navigation a:not(.btn)[aria-current]:not([data-hash-active=false])) span {
    border-bottom-color: var(--color-accent);
  }
  .navigation__brand {
    display: inline-flex;
    align-items: baseline;
    gap: 0.25em;
    font-weight: bold;
    font-size: 1.25rem;
    text-decoration: none;
    height: var(--main-header-logo-height, 44px);
    grid-row: 1/1;
    grid-column: 1/1;
  }
  .navigation__brand svg {
    width: auto;
    height: 100%;
  }
  .navigation__brand span {
    /* Inclusively hidden so it is still read as a label by assistive tech */
    height: 1px;
    overflow: hidden;
    position: absolute;
    clip-path: inset(50%);
    font-size: inherit;
    line-height: 0;
  }
  .navigation__menu :is(button, a) {
    letter-spacing: 0.03em;
    font-weight: 600;
    color: var(--color-primary);
  }
  .navigation__menu button {
    z-index: 1;
    margin-inline: auto 0;
  }
  .navigation__menu__menu {
    gap: 0.5rem;
    position: absolute;
    top: 0;
  }
  .navigation__actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
  .navigation {
    container: navigation/inline-size;
  }
  .navigation__menu {
    container: menu/inline-size;
    display: flex;
  }
  :where(.navigation__menu) {
    align-self: stretch;
    justify-content: flex-start;
    align-items: center;
  }
  .navigation__menu:has(:nth-child(6)) {
    --show-menu: true;
  }
  :where(ul.navigation__social-links) {
    display: grid;
    grid-auto-flow: column;
    place-content: center;
  }
  :where(ul.navigation__social-links) :is(li, a) {
    display: flex;
    align-items: center;
  }
  @container navigation (inline-size >= 10ch) {
    .navigation__brand span {
      height: auto;
      overflow: unset;
      position: unset;
      clip-path: unset;
      line-height: unset;
    }
  }
  @container navigation (inline-size >= 90ch) {
    .navigation__menu button {
      display: none;
    }
    .navigation__menu__menu {
      position: relative;
      display: flex;
      --nav-menu-bg: var(--nav-menu-show-bg, transparent);
    }
  }
  @container navigation (10ch <= inline-size <= 90ch) {
    .navigation:not([data-show-menu]) .btn:where([aria-expanded=false]) + .navigation__menu__menu {
      display: none;
      animation: var(--menu-hide, menu-hide-from-left) 500ms ease-in forwards;
    }
    .navigation:not([data-show-menu]) .btn:where([aria-expanded=true]) + .navigation__menu__menu {
      animation: var(--menu-show, menu-show-from-left) 500ms ease-in forwards;
    }
    .navigation:not([data-show-menu]) .navigation__menu {
      display: contents;
    }
    .navigation:not([data-show-menu]) .navigation__menu__menu {
      height: 100dvh;
      width: 100vw;
      margin-inline: calc(-50vw + 50%);
      top: 0;
      display: grid;
      place-content: center;
      background: var(--nav-menu-bg, var(--nav-menu-hide-bg, var(--color-accent)));
    }
  }
  .main-footer {
    grid-area: main-footer;
    z-index: 1;
    background-color: var(--footer-bg-color, var(--color-grey-1));
  }
  :where(.main-footer__container) {
    display: grid;
    grid-auto-flow: row;
    grid-template-areas: "footer-row-main" "footer-row-end";
    row-gap: var(--spacing-2xl);
  }
  .main-footer__nav {
    grid-area: footer-row-main;
  }
  :where(.main-footer__nav) {
    margin-top: var(--spacing-lg);
  }
  .main-footer__row-end {
    grid-area: footer-row-end;
  }
  :where(.main-footer__row-end) {
    display: flex;
    justify-content: center;
    margin-bottom: var(--spacing-2xl);
    padding-top: var(--spacing-md);
    border-top: 1px solid var(--color-grey-2);
    font-size: var(--text-sm);
  }
  .navigation__social-links a {
    font-size: var(--text-xl);
  }
}
@layer purity.components {
  :where(.btn, button) {
    --button-color-hover: color-mix(in oklch, var(--button-color-hover-mix-base, var(--button-color)) var(--button-color-hover-mix-base-strength, 75%), var(--button-color-hover-mix-into, white) var(--button-color-hover-mix-into-strength, 25%));
    --button-bg-hover: color-mix(in oklch, var(--button-bg-hover-mix-base, var(--button-bg)) var(--button-bg-hover-mix-base-strength, 90%), var(--button-bg-hover-mix-into, black) var(--button-bg-hover-mix-into-strength, 10%));
    display: inline-flex;
    justify-content: center;
    align-items: center;
    padding: var(--button-p, var(--text-frame-y) var(--text-frame-x));
    border: none;
    background-color: var(--button-bg, var(--color-primary));
    border-radius: var(--button-radius, var(--radius));
    font-weight: var(--button-weight, 500);
    font-size: var(--button-font-size, inherit);
    cursor: pointer;
    color: var(--button-color, var(--color-primary-text));
    letter-spacing: var(--button-letter-spacing, 0.03em);
    --button-bg: var(--color-grey-2);
    --button-color: var(--color-grey-15);
  }
  :where(.btn, button):hover {
    color: var(--button-color-hover);
    background-color: var(--button-bg-hover);
  }
  :where(.btn, button):has(.icon) {
    gap: var(--button-icon-gap, 0.5em);
  }
  .btn-neutral {
    --button-bg: var(--color-grey-12);
    --button-color: var(--color-grey-2);
  }
  .btn-primary {
    --button-bg: var(--color-primary);
    --button-color: var(--color-primary-text);
  }
  .btn-primary.btn-link {
    --button-color: var(--color-primary);
  }
  .btn-secondary {
    --button-bg: var(--color-secondary);
    --button-color: var(--color-secondary-text);
  }
  .btn-accent {
    --button-bg: var(--color-accent);
    --button-color: var(--color-accent-text);
  }
  .btn-ghost {
    --button-bg: transparent;
    --button-color: var(--color-grey-15);
  }
  .btn-link {
    --button-bg: transparent;
    --button-color: var(--color-grey-15);
    text-decoration: underline;
    --button-bg-hover: transparent;
    --text-frame-x: 0;
  }
  .btn-circle {
    height: 3rem;
    width: 3rem;
    border-radius: 9999px;
    padding: 0;
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link) {
    outline: 1px solid currentColor;
    --button-bg: transparent;
    --button-bg-hover: var(--button-color);
    --button-color: var(--color-grey-12);
    --button-color-hover: var(--color-grey-2);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-primary {
    --button-color: var(--color-primary);
    --button-color-hover: var(--color-primary-text);
    --button-bg-hover: var(--color-primary);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-secondary {
    --button-color: var(--color-secondary);
    --button-color-hover: var(--color-secondary-text);
    --button-bg-hover: var(--color-secondary);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-accent {
    --button-color: var(--color-accent);
    --button-color-hover: var(--color-accent-text);
    --button-bg-hover: var(--color-accent);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-neutral {
    --button-color: var(--color-grey-12);
    --button-color-hover: var(--color-grey-2);
  }
}
/**
 * Description: [Add a brief description of the code here]
 * 
    * @param {string} $type - The type of fluid heading font size. Possible values are "container" or "viewport".
 */
@layer purity.components {
  :where(.card, .p-card) {
    --color-surface-bg: transparent;
    --card-two-columns: var(--card-left-col, 1fr) var(--card-right-col, 1fr);
    --card-gutter-stacked: var(--spacing-gutter);
    grid-template-columns: var(--card-columns, 1fr);
    background-color: var(--card-bg, var(--color-surface-bg));
    position: relative;
    border: var(--field-border-width, 1px) solid var(--field-border-color);
    border-radius: var(--card-radius, var(--radius));
    height: 100%;
    gap: var(--card-gutter, var(--card-gutter-stacked));
    aspect-ratio: var(--card-aspect, none);
    display: grid;
    padding: var(--card-padding, 0);
  }
  :where(.card, .p-card) :is(h2, h3):not(.heading) {
    text-wrap: balance;
  }
  :where(.card, .p-card)[data-card-overlay-image=true] {
    display: grid;
    grid-template: 1fr/1fr;
    height: auto;
  }
  :where(.card, .p-card)[data-card-overlay-image=true] :is(.card-picture, .p-card-header, .card-body, .p-card-body) {
    height: 100%;
    grid-column: 1/1;
    grid-row: 1/1;
    position: relative;
  }
  :where(.card, .p-card)[data-card-overlay-image=true] .card-body, :where(.card, .p-card)[data-card-overlay-image=true] .p-card-body {
    z-index: 1;
    display: grid;
    justify-content: flex-start;
    align-content: flex-end;
  }
  :where(.card, .p-card)[data-card-overlay-image=true] .card-body .card-title, :where(.card, .p-card)[data-card-overlay-image=true] .p-card-body .card-title {
    container-type: normal;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=light] {
    --card-backdrop-color-from-color: var(--color-light);
    --card-backdrop-color-to-color: var(--color-light);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=dark] {
    --card-backdrop-color-from-color: var(--color-dark);
    --card-backdrop-color-to-color: var(--color-dark);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=eggshell] {
    --card-backdrop-color-from-color: var(--color-eggshell);
    --card-backdrop-color-to-color: var(--color-eggshell);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=primary] {
    --card-backdrop-color-from-color: var(--color-primary);
    --card-backdrop-color-to-color: var(--color-primary);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=primary-light] {
    --card-backdrop-color-from-color: var(--color-primary-light);
    --card-backdrop-color-to-color: var(--color-primary-light);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=primary-dark] {
    --card-backdrop-color-from-color: var(--color-primary-dark);
    --card-backdrop-color-to-color: var(--color-primary-dark);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=secondary] {
    --card-backdrop-color-from-color: var(--color-secondary);
    --card-backdrop-color-to-color: var(--color-secondary);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=secondary-light] {
    --card-backdrop-color-from-color: var(--color-secondary-light);
    --card-backdrop-color-to-color: var(--color-secondary-light);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=secondary-dark] {
    --card-backdrop-color-from-color: var(--color-secondary-dark);
    --card-backdrop-color-to-color: var(--color-secondary-dark);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme="accent accent-light"] {
    --card-backdrop-color-from-color: var(--color-accent accent-light);
    --card-backdrop-color-to-color: var(--color-accent accent-light);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=accent-dark] {
    --card-backdrop-color-from-color: var(--color-accent-dark);
    --card-backdrop-color-to-color: var(--color-accent-dark);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop] .card-body, :where(.card, .p-card)[data-card-overlay-backdrop] .p-card-body {
    isolation: isolate;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop] .card-body:before, :where(.card, .p-card)[data-card-overlay-backdrop] .p-card-body:before {
    content: "";
    display: block;
    width: 100%;
    inset: 0;
    position: absolute;
    height: 100%;
    border-image: var(--card-backdrop-fill, fill 0 linear-gradient(var(--card-backdrop-direction, in oklch to top), var(--card-backdrop-color-stop-from, oklch(from var(--card-backdrop-color-from-color, var(--color-light)) l c h/var(--card-backdrop-color-stop-from-opacity, 0.9)) 0%), var(--card-backdrop-color-stop-to, oklch(from var(--card-backdrop-color-to-color, var(--color-light)) l c h/var(--card-backdrop-color-stop-to-opacity, 0.15)) 100%)));
    z-index: -1;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=linear-to-top] {
    --card-backdrop-direction: in oklch to top;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=linear-to-right] {
    --card-backdrop-direction: in oklch to right;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=linear-to-bottom] {
    --card-backdrop-direction: in oklch to bottom;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=linear-to-left] {
    --card-backdrop-direction: in oklch to left;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=uniform] {
    --card-backdrop-color-stop-from-opacity: 0.45;
    --card-backdrop-color-stop-to-opacity: 0.45;
  }
  :where(.card, .p-card) :is(.btn, button):focus-visible {
    --outline-color: transparent;
  }
  :where(.card, .p-card) :is(.btn, button):only-of-type::before {
    content: "";
    position: absolute;
    inset: 0;
  }
  :where(.card, .p-card)[data-card-clip=true]:is([data-surface-theme], [class*=bg-], [data-card-overlay-image]) {
    overflow: clip;
  }
  :where(.card, .p-card):not([class*=card--side]) {
    grid-auto-flow: column;
    align-items: flex-start;
    justify-content: start;
    aspect-ratio: unset;
  }
  :where(.card, .p-card):not([class*=card--side]):has(.card-picture, .p-card-header) {
    grid-auto-flow: row;
    grid-auto-rows: auto;
  }
  :where(.card, .p-card):is([data-card-row-justify=start]) {
    justify-content: start;
  }
  :where(.card, .p-card):is([data-card-row-justify=center]) {
    justify-content: center;
  }
  :where(.card, .p-card):is([data-card-row-justify=end]) {
    justify-content: end;
  }
  :where(.card, .p-card):is([data-card-row-justify=stretch]) {
    justify-content: stretch;
  }
  :where(.card, .p-card):is([data-card-row-justify=space-between]) {
    justify-content: space-between;
  }
  :where(.card, .p-card):is([data-card-row-justify=space-around]) {
    justify-content: space-around;
  }
  :where(.card, .p-card):is([data-card-row-justify=space-evenly]) {
    justify-content: space-evenly;
  }
  :where(.card, .p-card):is([data-card-row-justify=safe]) {
    justify-content: safe center;
  }
  :where(.card, .p-card):is([data-card-row-justify=unsafe]) {
    justify-content: unsafe center;
  }
  :where(.card, .p-card):is([data-card-row-align=start]) {
    align-items: start;
  }
  :where(.card, .p-card):is([data-card-row-align=center]) {
    align-items: center;
  }
  :where(.card, .p-card):is([data-card-row-align=end]) {
    align-items: end;
  }
  :where(.card, .p-card):is([data-card-row-align=stretch]) {
    align-items: stretch;
  }
  :where(.card, .p-card):is([data-card-row-align=baseline]) {
    align-items: baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=first]) {
    align-items: first baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=last]) {
    align-items: last baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=safe]) {
    align-items: safe center;
  }
  :where(.card, .p-card):is([data-card-row-align=unsafe]) {
    align-items: unsafe center;
  }
  :where(.card, .p-card):is([data-card-row-align=self-start]) {
    align-self: start;
  }
  :where(.card, .p-card):is([data-card-row-align=self-center]) {
    align-self: center;
  }
  :where(.card, .p-card):is([data-card-row-align=self-end]) {
    align-self: end;
  }
  :where(.card, .p-card):is([data-card-row-align=self-stretch]) {
    align-self: stretch;
  }
  :where(.card, .p-card):is([data-card-row-align=self-baseline]) {
    align-self: baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=self-first]) {
    align-self: first baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=self-last]) {
    align-self: last baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=self-safe]) {
    align-self: safe center;
  }
  :where(.card, .p-card):is([data-card-row-align=self-unsafe]) {
    align-self: unsafe center;
  }
  :where(.card, .p-card):is([data-card-row-align=self-auto]) {
    align-self: auto;
  }
  :where(.card, .p-card):is([data-card-row-align=self-normal]) {
    align-self: normal;
  }
  :where(.card, .p-card):is([data-card-row-text-align=start]) .card-body {
    text-align: start;
  }
  :where(.card, .p-card):is([data-card-row-text-align=center]) .card-body {
    text-align: center;
  }
  :where(.card, .p-card):is([data-card-row-text-align=end]) .card-body {
    text-align: end;
  }
  :where(.card-title, .p-card-title) {
    --heading-fs-max: 1rem;
    font-size: var(--heading-font-size, var(--fs-max));
    color: var(--heading-color, var(--color-surface-text));
    font-weight: var(--heading-font-weight, bold);
    text-transform: var(--heading-text-transform, none);
    font-family: var(--heading-font-family, inherit);
    letter-spacing: var(--heading-letter-spacing, normal);
    line-height: var(--heading-line-height);
    text-wrap: balance;
    --heading-fs-fluid-viewport: 1vi;
    --fs-min: var(--heading-xs-fs-min);
    --fs: var(--heading-xs-font-size);
    --heading-line-height: var(--heading-xs-line-height);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
    display: block;
  }
  :where(.card-title, .p-card-title).fluid {
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  @supports (font-size: 1cqi) {
    :where(.card-title, .p-card-title) {
      --fs-fluid: var(--heading-xs-fs-fluid);
    }
  }
  :where(.card-title, .p-card-title).fluid-viewport {
    --min-font-size: var(--display-xs-px);
    --max-font-size: var(--display-xs-px);
    --viewport-from: 320;
    --viewport-to: 960;
    --viewport-unit-converter: 1vw;
    --fz-from: var(--font-size-from, var(--min-font-size));
    --fz-to: var(--font-size-to, var(--max-font-size));
    --fz-slope: (var(--fz-to) - var(--fz-from)) / (var(--viewport-to) - var(--viewport-from)) * 100;
    --fz-intercept: (var(--viewport-to) * var(--fz-from) - var(--viewport-from) * var(--fz-to)) / (var(--viewport-to) - var(--viewport-from));
    --font-size: calc(var(--fz-slope) * var(--viewport-unit-converter) + var(--fz-intercept) * 1px);
    --min-fz-px: calc(var(--min-font-size) * 1px);
    --max-fz-px: calc(var(--max-font-size) * 1px);
    --clamp: clamp(var(--min-fz-px), var(--font-size), var(--max-fz-px));
    --max: var(--has-max, var(--min));
    --min: var(--has-min, var(--font-size));
    --has-max: min(var(--max-fz-px), var(--font-size));
    --has-min: max(var(--min-fz-px), var(--font-size));
    --heading-font-size: var(--clamp, var(--max));
  }
  :where(.card-subtitle, .p-card-subtitle) {
    font-size: var(--subtitle-font-size, inherit);
    color: var(--subtitle-color, var(--color-global-text));
    font-family: var(--subtitle-font-family, inherit);
    line-height: var(--subtitle-line-height, inherit);
    text-wrap: balance;
    letter-spacing: var(--subtitle-letter-spacing, normal);
    --flow-space: var(--spacing-rel-4);
    display: block;
  }
  :where(.card-picture, .p-card-header) {
    align-self: stretch;
    display: flex;
    justify-content: center;
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=auto] {
    --card-aspect: auto;
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=landscape] {
    --card-aspect: var(--aspect-landscape);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=square] {
    --card-aspect: var(--aspect-square);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=portrait] {
    --card-aspect: var(--aspect-portrait);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=widescreen] {
    --card-aspect: var(--aspect-widescreen);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=ultrawide] {
    --card-aspect: var(--aspect-ultrawide);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=golden] {
    --card-aspect: var(--aspect-golden);
  }
  :where(.card-picture, .p-card-header):is([data-card-picture-mask-row], [data-card-picture-mask-column]) {
    mask-image: var(--card-image-mask, none);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-mask-row=linear-to-top] {
    --card-image-mask: linear-gradient(to top, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
  }
  :where(.card-picture, .p-card-header)[data-card-picture-mask-row=linear-to-right] {
    --card-image-mask: linear-gradient(to right, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
  }
  :where(.card-picture, .p-card-header)[data-card-picture-mask-row=linear-to-bottom] {
    --card-image-mask: linear-gradient(to bottom, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
  }
  :where(.card-picture, .p-card-header)[data-card-picture-mask-row=linear-to-left] {
    --card-image-mask: linear-gradient(to left, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
  }
  :where(.card-picture, .p-card-header) img {
    aspect-ratio: var(--card-aspect, var(--aspect-landscape));
    height: 100%;
    object-fit: cover;
  }
  :where(.card-picture, .p-card-header):empty {
    display: none;
  }
  :where(.card-body, .p-card-body,
  .card-caption, .p-card-caption,
  .card-content, .p-card-content,
  .card-footer, .p-card-footer) > * + * {
    margin-block-start: var(--flow-space, max(1rem, 0.275em));
  }
  :where(.card-body, .p-card-body,
  .card-caption, .p-card-caption,
  .card-content, .p-card-content,
  .card-footer, .p-card-footer) > * + *:where(button:only-of-type, .btn:only-of-type, :has(> button, > .btn)) {
    --flow-space: var(--spacing-rel-4);
  }
  :where(.card-body, .p-card-body) {
    padding: var(--card-body-padding, 0);
    display: block;
  }
  :where(.card, .p-card):is([class*=bg-],
  [data-surface-theme],
  [class*="--color-surface-bg"],
  [data-card-overlay-image]) {
    --card-body-padding: var(--spacing-card-component);
  }
  :where(.card, .p-card):is([class*=bg-],
  [data-surface-theme],
  [class*="--color-surface-bg"],
  [data-card-overlay-image]):focus-within {
    outline: 3px solid var(--color-surface-bg-interact);
    outline-offset: -6px;
  }
  :where(.card, .p-card):is([class*=bg-],
  [data-surface-theme],
  [class*="--color-surface-bg"]):is(.card--stacked):has(:where(.card-picture, .p-card-header:not(.hidden, [class*=order-])) + :where(.card-body, .p-card-body)) :where(.card-body, .p-card-body) {
    padding-block-start: 0;
  }
  @container (inline-size <= 80ch) {
    :where(.card, .p-card):is([class*=bg-],
    [data-surface-theme],
    [class*="--color-surface-bg"]):not(:is(.card--side, [data-card-reverse-order-row=true])):has(:where(:is(.card-picture, .p-card-header:not(.hidden, [class*=order-])):not(:empty) + :is(.card-body, .p-card-body))) :where(.card-body, .p-card-body) {
      padding-block-start: 0;
    }
    :where(.card, .p-card):not([class*=card--side]):has(.card-picture, .p-card-header) {
      grid-auto-rows: auto;
    }
    :where(.card, .p-card):is([data-card-reverse-order-row=true]) .card-picture, :where(.card, .p-card):is([data-card-reverse-order-row=true]) .p-card-header {
      order: 2;
    }
  }
  @container (inline-size > 80ch) {
    :where(.card, .p-card) {
      --card-gutter: var(--card-gutter-cols-gutter, var(--spacing-gutter-xl));
      max-width: 100%;
    }
    :where(.card, .p-card):where([data-card-column-justify]) .card-body {
      display: flex;
      flex-wrap: wrap;
    }
    :where(.card, .p-card):where([data-card-column-justify]) .card-body > :is(.card-caption, .card-content, .card-footer) {
      flex: 1 1 100%;
    }
    :where(.card, .p-card):is([data-card-column-justify=start]) .card-body {
      justify-content: start;
    }
    :where(.card, .p-card):is([data-card-column-justify=center]) .card-body {
      justify-content: center;
    }
    :where(.card, .p-card):is([data-card-column-justify=end]) .card-body {
      justify-content: end;
    }
    :where(.card, .p-card):is([data-card-column-justify=stretch]) .card-body {
      justify-content: stretch;
    }
    :where(.card, .p-card):is([data-card-column-justify=space-between]) .card-body {
      justify-content: space-between;
    }
    :where(.card, .p-card):is([data-card-column-justify=space-around]) .card-body {
      justify-content: space-around;
    }
    :where(.card, .p-card):is([data-card-column-justify=space-evenly]) .card-body {
      justify-content: space-evenly;
    }
    :where(.card, .p-card):is([data-card-column-justify=safe]) .card-body {
      justify-content: safe center;
    }
    :where(.card, .p-card):is([data-card-column-justify=unsafe]) .card-body {
      justify-content: unsafe center;
    }
    :where(.card, .p-card):is([data-card-column-align=start]) {
      align-items: start;
    }
    :where(.card, .p-card):is([data-card-column-align=center]) {
      align-items: center;
    }
    :where(.card, .p-card):is([data-card-column-align=end]) {
      align-items: end;
    }
    :where(.card, .p-card):is([data-card-column-align=stretch]) {
      align-items: stretch;
    }
    :where(.card, .p-card):is([data-card-column-align=baseline]) {
      align-items: baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=first]) {
      align-items: first baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=last]) {
      align-items: last baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=safe]) {
      align-items: safe center;
    }
    :where(.card, .p-card):is([data-card-column-align=unsafe]) {
      align-items: unsafe center;
    }
    :where(.card, .p-card):is([data-card-column-align=self-start]) {
      align-self: start;
    }
    :where(.card, .p-card):is([data-card-column-align=self-center]) {
      align-self: center;
    }
    :where(.card, .p-card):is([data-card-column-align=self-end]) {
      align-self: end;
    }
    :where(.card, .p-card):is([data-card-column-align=self-stretch]) {
      align-self: stretch;
    }
    :where(.card, .p-card):is([data-card-column-align=self-baseline]) {
      align-self: baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=self-first]) {
      align-self: first baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=self-last]) {
      align-self: last baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=self-safe]) {
      align-self: safe center;
    }
    :where(.card, .p-card) :is([data-card-column-align=self-unsafe]) {
      align-self: unsafe center;
    }
    :where(.card, .p-card) :is([data-card-column-align=self-auto]) {
      align-self: auto;
    }
    :where(.card, .p-card) :is([data-card-column-align=self-normal]) {
      align-self: normal;
    }
    :where(.card, .p-card):is([data-card-column-text-align=start]) .card-body {
      text-align: start;
    }
    :where(.card, .p-card):is([data-card-column-text-align=center]) .card-body {
      text-align: center;
    }
    :where(.card, .p-card):is([data-card-column-text-align=end]) .card-body {
      text-align: end;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=linear-to-top] {
      --card-backdrop-direction: in oklch to top;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=linear-to-right] {
      --card-backdrop-direction: in oklch to right;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=linear-to-bottom] {
      --card-backdrop-direction: in oklch to bottom;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=linear-to-left] {
      --card-backdrop-direction: in oklch to left;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=uniform] {
      --card-backdrop-color-stop-from-opacity: 0.45;
      --card-backdrop-color-stop-to-opacity: 0.45;
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column] {
      --card-aspect: var(--card-aspect-cols, auto);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=auto] {
      --card-aspect-cols: auto;
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=landscape] {
      --card-aspect-cols: var(--aspect-landscape);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=square] {
      --card-aspect-cols: var(--aspect-square);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=portrait] {
      --card-aspect-cols: var(--aspect-portrait);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=widescreen] {
      --card-aspect-cols: var(--aspect-widescreen);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=ultrawide] {
      --card-aspect-cols: var(--aspect-ultrawide);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=golden] {
      --card-aspect-cols: var(--aspect-golden);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column] {
      --card-image-mask: var(--card-image-mask-column, none);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column=linear-to-top] {
      --card-image-mask-column: linear-gradient(to top, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column=linear-to-right] {
      --card-image-mask-column: linear-gradient(to right, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column=linear-to-bottom] {
      --card-image-mask-column: linear-gradient(to bottom, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column=linear-to-left] {
      --card-image-mask-column: linear-gradient(to left, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
    }
  }
  @container (inline-size > 35ch) {}
  :where(.card, .p-card):is([class*=card--side]):has(.card-picture, .p-card-header) {
    --card-columns: var(--card-two-columns);
    --card-gap: calc(var(--card-p) * 2);
    grid-auto-flow: column;
  }
  :where(.card, .p-card):is([class*=card--side]):is([data-card-reverse-order-column=true]) .card-body {
    padding-inline-end: 0;
  }
  :where(.card, .p-card):is([class*=card--side]):not([data-card-reverse-order-column=true], :has(:where(.card-body, .p-card-body) + :where(.card-picture, .p-card-header))) .card-body {
    padding-inline-start: 0;
  }
  :where(.card, .p-card):is([class*=card--side]):has(.card-picture:is(empty)) {
    --card-columns: 1fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(.p-card-header:is(empty)) {
    --card-columns: 1fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(:is(.card-picture, .p-card-header):first-child + :is(.card-body, .p-card-body)) {
    --card-left-col: 0.6fr;
    --card-right-col: 0.4fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(:is(.card-picture, .p-card-header):is([data-card-picture-aspect-column=square]):first-child + :is(.card-body, .p-card-body)) {
    --card-left-col: 0.5fr;
    --card-right-col: 0.5fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .p-card-header)) {
    --card-left-col: 0.4fr;
    --card-right-col: 0.6fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .p-card-header):is([data-card-picture-aspect-column=square])) {
    --card-left-col: 0.5fr;
    --card-right-col: 0.5fr;
  }
  @container (inline-size > 80ch) {
    :where(.card, .p-card):not([class*=card--side]):has(.card-picture, .p-card-header) {
      --card-columns: var(--card-two-columns);
      --card-gap: calc(var(--card-p) * 2);
      grid-auto-flow: column;
    }
    :where(.card, .p-card):not([class*=card--side]):has(.card-picture:is(:empty)) {
      --card-columns: 1fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(.p-card-header:is(:empty)) {
      --card-columns: 1fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-picture, .p-card-header):first-child + :is(.card-body, .p-card-body)) {
      --card-left-col: 0.6fr;
      --card-right-col: 0.4fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-picture, .p-card-header):is([data-card-picture-aspect-column=square]):first-child + :is(.card-body, .p-card-body)) {
      --card-left-col: 0.5fr;
      --card-right-col: 0.5fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .p-card-header)) {
      --card-left-col: 0.4fr;
      --card-right-col: 0.6fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .p-card-header):is([data-card-picture-aspect-column=square])) {
      --card-left-col: 0.5fr;
      --card-right-col: 0.5fr;
    }
    :where(.card-picture, .p-card-header) {
      order: initial;
    }
    :where(.card, .p-card):is([data-card-reverse-order-column=true]) .card-picture, :where(.card, .p-card):is([data-card-reverse-order-column=true]) .p-card-header {
      order: 2;
    }
    :where(.card, .p-card):has([data-card-reverse-order-column=true], :is(.card-picture, .p-card-header) + :is(.card-body, .p-card-body)) :where(.card-body, .p-card-body) {
      padding-inline-start: 0;
    }
    :where(.card, .p-card):has(:is(.card-body, .p-card-body) + :is(.card-picture, .p-card-header)) :where(.card-body, .p-card-body) {
      padding-inline-end: 0;
    }
  }
  :is(.card, .p-card).card--stacked {
    --card-columns: 1fr;
    --card-gutter: var(--card-gutter-stacked);
    grid-auto-flow: row;
  }
  :where(.card-footer, .p-card-footer) {
    max-width: max-content;
  }
  @container (inline-size > 80ch) {
    :where([data-slice-variation=cardRow8],
    [data-slice-variation=cardRow9],
    [data-slice-variation=cardRow10],
    [data-slice-variation=cardRow11],
    [data-slice-variation=cardRow13],
    [data-slice-variation=cardRow14],
    [data-slice-variation=cardRow16],
    [data-slice-variation=cardRow17],
    [data-slice-variation=cardRow18]) .layout-grid {
      grid-auto-flow: dense;
    }
  }
  @container (inline-size > 80ch) {
    :where([data-slice-variation=cardRow8],
    [data-slice-variation=cardRow10]) .layout-grid > div:nth-child(6n+2) {
      grid-row: span 2;
    }
    :where([data-slice-variation=cardRow8],
    [data-slice-variation=cardRow10]) .layout-grid > div:nth-child(6n+5) {
      grid-column: 2/2;
      grid-row: span 2;
    }
  }
  @container (inline-size > 80ch) {
    :where([data-slice-variation=cardRow9],
    [data-slice-variation=cardRow11]) .layout-grid > div:nth-child(6n+1) {
      grid-row: span 2;
    }
    :where([data-slice-variation=cardRow9],
    [data-slice-variation=cardRow11]) .layout-grid > div:nth-child(6n+4) {
      grid-column: 2/2;
      grid-row: span 2;
    }
  }
  @container (inline-size > 80ch) {
    :where([data-slice-variation=cardRow12],
    [data-slice-variation=cardRow14],
    [data-slice-variation=cardRow16]) .layout-grid > div:nth-child(6n+1) {
      grid-column: span 2;
    }
  }
  @container (inline-size > 80ch) {
    [data-slice-variation=cardRow13] .layout-grid > div:nth-child(6n+3) {
      grid-column: span 2;
    }
  }
  @container (inline-size > 80ch) {
    [data-slice-variation=cardRow17] .layout-grid > div:nth-child(6n+1) {
      grid-column: span 2;
      grid-row: span 2;
    }
  }
  @container (inline-size > 80ch) {
    [data-slice-variation=cardRow18] .layout-grid > div:nth-child(5) {
      grid-row: -1/span 2;
      grid-column: -3/span 2;
    }
    [data-slice-variation=cardRow18] .layout-grid > div:nth-child(5n+1), [data-slice-variation=cardRow18] .layout-grid > div:nth-child(5n+2), [data-slice-variation=cardRow18] .layout-grid > div:nth-child(5n+3), [data-slice-variation=cardRow18] .layout-grid > div:nth-child(5n+4) {
      grid-column: auto;
      grid-row: auto;
    }
    [data-slice-variation=cardRow18] .layout-grid > div:nth-child(10n+6) {
      grid-column: 1/span 2;
      grid-row: span 2;
    }
    [data-slice-variation=cardRow18] .layout-grid > div:nth-child(10n+7) {
      grid-row: 5/span 2;
      grid-column: -3/span 2;
    }
  }
}
@layer purity.components {
  :where(.c-header-main).fixed + main .hero-content__text {
    padding-block-start: calc(var(--header-min-h) + var(--layout-gap));
  }
  :where(.c-header-main).fixed + main .hero--min-h-screen {
    --hero-min-h: min(1000px, 100dvb);
  }
  .hero--min-h-screen {
    --hero-min-h: min(1000px, calc(100dvb - var(--header-min-h)));
  }
  .hero--full-overlay {
    grid: 1fr/1fr;
  }
  .hero--full-overlay .hero-content {
    display: grid;
    grid: 1fr/1fr;
  }
  .hero--full-overlay :is(.hero__container, .hero__content, .hero-content__text, .hero-content__image) {
    grid-column: 1/1;
    grid-row: 1/1;
  }
  .hero--full-overlay .hero-content__text {
    z-index: 1;
    width: 100%;
    height: 100%;
  }
  .hero--full-overlay .hero-content__image {
    width: 100vw;
    margin-inline: calc(-50vw + 50%);
    position: absolute;
    height: 100%;
    max-height: 100%;
  }
  .hero--full-overlay .hero-content__image img {
    width: 100%;
  }
  .hero--full-overlay.is-overlay .hero-content__image {
    isolation: isolate;
  }
  .hero--full-overlay.is-overlay .hero-content__image:before {
    content: "";
    display: block;
    width: 100%;
    inset: 0;
    position: absolute;
    height: 100%;
    border-image: var(--card-backdrop-fill, fill 0 linear-gradient(var(--card-backdrop-direction, in oklch to top), var(--card-backdrop-color-stop-from, oklch(from var(--card-backdrop-color-from-color, var(--color-light)) l c h/var(--card-backdrop-color-stop-from-opacity, 0.9)) 0%), var(--card-backdrop-color-stop-to, oklch(from var(--card-backdrop-color-to-color, var(--color-light)) l c h/var(--card-backdrop-color-stop-to-opacity, 0.15)) 100%)));
    z-index: -1;
  }
  :where(.hero--full-overlay) .hero-content__text {
    text-align: center;
  }
  :where(.hero--full-overlay) *:has(> .button) {
    justify-content: center;
  }
  .hero--top-down .hero-content__container {
    flex-direction: column;
    flex-wrap: nowrap;
  }
  .hero--top-down .hero-content {
    --layout-column-min: 100%;
  }
  .hero--top-down .hero-content__text {
    container: none;
    flex-grow: 1;
    padding-block-start: calc(var(--layout-gap) * 2);
  }
  .hero--top-down .hero-content__text:has(+ *) {
    padding-block-end: 0;
  }
  .hero--top-down .hero-content__text:has(+ *) {
    padding-block-end: 0;
  }
  :where(.hero--top-down) .hero-content__text {
    text-align: center;
  }
  :where(.hero--top-down) *:has(> .button) {
    justify-content: center;
  }
  .hero {
    display: grid;
    position: relative;
    aspect-ratio: var(--hero-aspect, 16 / 7);
    background-color: var(--hero-bg, var(--color-surface-bg));
  }
  .hero .navigation__brand {
    font-size: 4rem;
  }
  .hero .navigation__brand span {
    all: unset;
  }
  .hero__container {
    height: 100%;
  }
  .hero-content {
    position: relative;
  }
  :is(.hero, .hero__container, .hero-content) {
    display: grid;
  }
  :is(.hero__container, .hero__content, .hero__content > *) {
    flex: 1 1 auto;
  }
  .hero-content__container {
    --flex-grid-min: 45ch;
  }
  .hero-content__text {
    padding-block: var(--layout-gap);
  }
  .hero-content__image {
    display: flex;
    justify-content: center;
  }
  :where(.hero-content__image img) {
    object-fit: cover;
  }
  @container layout-container (inline-size < 120ch) {
    .hero-content {
      --layout-column-min: 100%;
    }
    .hero-content__text:has(+ *) {
      padding-block-start: 0;
    }
  }
  @container layout-container (inline-size > 120ch) {
    .hero-content__text {
      --flex-grid-min: 65ch;
      flex-grow: 0;
    }
  }
}
@layer purity.components {
  :where(blockquote, q) {
    font-family: var(--font-family-quote, var(--font-family-serif));
  }
  .quote {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-gutter-sm);
  }
  .quote img.quote__avatar {
    aspect-ratio: 1/1;
    border-radius: 50%;
    width: clamp(4rem, 30%, 6rem);
    flex-shrink: 0;
    object-fit: cover;
  }
  .quote q {
    quotes: none;
  }
}
