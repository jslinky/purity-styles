@import "./open-props/media" layer(purity.open-props);
@layer purity-tw, purity, purity-util, site;
@layer purity-tw {
  @layer preflight, theme;
}
@layer purity {
  @layer reset, base, open-props, theme, components;
}
@layer purity.reset {
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }
  * {
    margin: 0;
  }
  body {
    -webkit-font-smoothing: antialiased;
  }
  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }
  input,
  button,
  textarea,
  select {
    font: inherit;
  }
  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
  }
  #root,
  #__nuxt {
    isolation: isolate;
  }
}
@layer purity.open-props {
  :where(html) {
    --op-gray-0-hsl: 210 17% 98%;
    --op-gray-1-hsl: 210 17% 95%;
    --op-gray-2-hsl: 210 16% 93%;
    --op-gray-3-hsl: 210 14% 89%;
    --op-gray-4-hsl: 210 14% 83%;
    --op-gray-5-hsl: 210 11% 71%;
    --op-gray-6-hsl: 210 7% 56%;
    --op-gray-7-hsl: 210 9% 31%;
    --op-gray-8-hsl: 210 10% 23%;
    --op-gray-9-hsl: 210 11% 15%;
    --op-gray-10-hsl: 214 14% 10%;
    --op-gray-11-hsl: 216 16% 6%;
    --op-gray-12-hsl: 210 40% 2%;
    --op-stone-1-hsl: 210 18% 96%;
    --op-stone-3-hsl: 192 9% 89%;
    --op-stone-5-hsl: 202 5% 71%;
    --op-jungle-0-hsl: 74 98% 84%;
    --op-jungle-1-hsl: 74 79% 78%;
    --op-jungle-2-hsl: 74 68% 71%;
    --op-jungle-3-hsl: 75 62% 65%;
    --op-jungle-4-hsl: 74 56% 59%;
    --op-jungle-5-hsl: 74 53% 53%;
    --op-jungle-6-hsl: 74 55% 47%;
    --op-jungle-7-hsl: 74 66% 42%;
    --op-jungle-8-hsl: 74 79% 36%;
    --op-jungle-9-hsl: 73 90% 32%;
    --op-jungle-10-hsl: 73 91% 26%;
    --op-jungle-11-hsl: 73 91% 21%;
    --op-jungle-12-hsl: 73 90% 16%;
  }
}
@layer purity.open-props {
  :where(html) {
    --op-red-0-oklch: oklch(99% 0.03 25);
    --op-red-1-oklch: oklch(95% 0.06 25);
    --op-red-2-oklch: oklch(88% 0.12 25);
    --op-red-3-oklch: oklch(80% 0.14 25);
    --op-red-4-oklch: oklch(74% 0.16 25);
    --op-red-5-oklch: oklch(68% 0.19 25);
    --op-red-6-oklch: oklch(63% 0.2 25);
    --op-red-7-oklch: oklch(58% 0.21 25);
    --op-red-8-oklch: oklch(53% 0.2 25);
    --op-red-9-oklch: oklch(49% 0.19 25);
    --op-red-10-oklch: oklch(42% 0.17 25);
    --op-red-11-oklch: oklch(35% 0.15 25);
    --op-red-12-oklch: oklch(27% 0.12 25);
    --op-color-0: oklch(99% 0.03 var(--color-hue, 0));
    --op-color-1: oklch(95% 0.06 var(--color-hue, 0));
    --op-color-2: oklch(88% 0.12 var(--color-hue, 0));
    --op-color-3: oklch(80% 0.14 var(--color-hue, 0));
    --op-color-4: oklch(74% 0.16 var(--color-hue, 0));
    --op-color-5: oklch(68% 0.19 var(--color-hue, 0));
    --op-color-6: oklch(63% 0.2 var(--color-hue, 0));
    --op-color-7: oklch(58% 0.21 var(--color-hue, 0));
    --op-color-8: oklch(53% 0.2 var(--color-hue, 0));
    --op-color-9: oklch(49% 0.19 var(--color-hue, 0));
    --op-color-10: oklch(42% 0.17 var(--color-hue, 0));
    --op-color-11: oklch(35% 0.15 var(--color-hue, 0));
    --op-color-12: oklch(27% 0.12 var(--color-hue, 0));
    --op-color-13: oklch(20% 0.09 var(--color-hue, 0));
    --op-color-14: oklch(14% 0.07 var(--color-hue, 0));
    --op-color-15: oklch(11% 0.05 var(--color-hue, 0));
    --op-color-bright: oklch(65% 0.3 var(--color-hue, 0));
    --op-hue-red: 25;
    --op-hue-pink: 350;
    --op-hue-purple: 310;
    --op-hue-violet: 290;
    --op-hue-indigo: 270;
    --op-hue-blue: 240;
    --op-hue-cyan: 210;
    --op-hue-teal: 185;
    --op-hue-green: 145;
    --op-hue-lime: 125;
    --op-hue-yellow: 100;
    --op-hue-orange: 75;
  }
}
@layer purity.open-props {
  :where(html) {
    --op-border-size-1: 1px;
    --op-border-size-2: 2px;
    --op-radius-6: 8rem;
    --op-radius-blob-1: 30% 70% 70% 30%/53% 30% 70% 47%;
    --op-radius-conditional-1: clamp(0px, (100vw - 100%) * 100000, 2px);
  }
}
@layer purity.open-props {
  :where(html) {
    --op-gradient-1: linear-gradient(to bottom right, #1f005c, #5b0060, #870160, #ac255e, #ca485c, #e16b5c, #f39060, #ffb56b);
    --op-gradient-2: linear-gradient(to bottom right, #48005c, #8300e2, #a269ff);
    --op-gradient-3: radial-gradient(circle at top right, hsl(180, 100%, 50%), hsla(180, 100%, 50%, 0)), radial-gradient(circle at bottom left, hsl(328, 100%, 54%), hsla(328, 100%, 54%, 0));
  }
}
@layer purity.open-props {
  :where(html) {
    --op-mask-edge-scoop-bottom: radial-gradient(20px at 50% 100%, rgba(0, 0, 0, 0) 97%, #000) 50%/38px 100%;
    --op-mask-edge-scoop-top: radial-gradient(20px at 50% 0, rgba(0, 0, 0, 0) 97%, #000) 50%/38px 100%;
    --op-mask-edge-scoop-vertical: radial-gradient(20px at 50% 20px, rgba(0, 0, 0, 0) 97%, #000) 50% -20px/38px 100%;
    --op-mask-edge-scoop-left: radial-gradient(20px at 0 50%, rgba(0, 0, 0, 0) 97%, #000) 50%/100% 38px;
    --op-mask-edge-scoop-right: radial-gradient(20px at 100% 50%, rgba(0, 0, 0, 0) 97%, #000) 50%/100% 38px;
    --op-mask-edge-scoop-horizontal: radial-gradient(20px at 20px 50%, rgba(0, 0, 0, 0) 97%, #000) -20px/100% 38px;
    --op-mask-edge-scalloped: radial-gradient(farthest-side, #000 97%, rgba(0, 0, 0, 0)) 0 0/20px 20px round, linear-gradient(#000 0 0) 50%/calc(100% - 20px) calc(100% - 20px) no-repeat;
    --op-mask-edge-scalloped-bottom: linear-gradient(to top, rgba(0, 0, 0, 0) 20px, #000 0), radial-gradient(20px at top, #000 97%, rgba(0, 0, 0, 0)) bottom/38px 20px;
    --op-mask-edge-scalloped-top: linear-gradient(to bottom, rgba(0, 0, 0, 0) 20px, #000 0), radial-gradient(20px at bottom, #000 97%, rgba(0, 0, 0, 0)) top/38px 20px;
    --op-mask-edge-scalloped-vertical: linear-gradient(0deg, rgba(0, 0, 0, 0) 40px, #000 0) 0 20px, radial-gradient(20px, #000 97%, rgba(0, 0, 0, 0)) 50%/38px 40px repeat space;
    --op-mask-edge-scalloped-left: linear-gradient(to right, rgba(0, 0, 0, 0) 20px, #000 0), radial-gradient(20px at right, #000 97%, rgba(0, 0, 0, 0)) left/20px 38px;
    --op-mask-edge-scalloped-right: linear-gradient(to left, rgba(0, 0, 0, 0) 20px, #000 0), radial-gradient(20px at left, #000 97%, rgba(0, 0, 0, 0)) right/20px 38px;
    --op-mask-edge-scalloped-horizontal: linear-gradient(-90deg, rgba(0, 0, 0, 0) 40px, #000 0) 20px, radial-gradient(20px, #000 97%, rgba(0, 0, 0, 0)) 50%/40px 38px space repeat;
    --op-mask-edge-drip-bottom: radial-gradient(20px at bottom, rgba(0, 0, 0, 0) 97%, #000) 50% calc(100% - 20px)/40px 100% repeat-x, radial-gradient(20px at 25% 50%, #000 97%, rgba(0, 0, 0, 0)) calc(50% - 20px) 99%/80px 40px repeat-x;
    --op-mask-edge-drip-top: radial-gradient(20px at top, rgba(0, 0, 0, 0) 97%, #000) 50% 20px/40px 100% repeat-x, radial-gradient(20px at 25% 50%, #000 97%, rgba(0, 0, 0, 0)) calc(50% - 20px) 1%/80px 40px repeat-x;
    --op-mask-edge-drip-vertical: radial-gradient(20px at top, rgba(0, 0, 0, 0) 97%, #000) 50% 20px/40px 51% repeat-x, radial-gradient(20px at bottom, rgba(0, 0, 0, 0) 97%, #000) 50% calc(100% - 20px)/40px 51% repeat-x, radial-gradient(20px at 25% 50%, #000 97%, rgba(0, 0, 0, 0)) calc(50% - 20px) 1%/80px 40px repeat-x, radial-gradient(20px at 25% 50%, #000 97%, rgba(0, 0, 0, 0)) calc(50% - 60px) 99%/80px 40px repeat-x;
    --op-mask-edge-drip-left: radial-gradient(20px at left, rgba(0, 0, 0, 0) 97%, #000) 20px 50%/100% 40px repeat-y, radial-gradient(20px at 50% 25%, #000 97%, rgba(0, 0, 0, 0)) 1% calc(50% - 20px)/40px 80px repeat-y;
    --op-mask-edge-drip-right: radial-gradient(20px at right, rgba(0, 0, 0, 0) 97%, #000) calc(100% - 20px) 50%/100% 40px repeat-y, radial-gradient(20px at 50% 25%, #000 97%, rgba(0, 0, 0, 0)) 99% calc(50% - 20px)/40px 80px repeat-y;
    --op-mask-edge-drip-horizontal: radial-gradient(20px at left, rgba(0, 0, 0, 0) 97%, #000) 20px 50%/51% 40px repeat-y, radial-gradient(20px at right, rgba(0, 0, 0, 0) 97%, #000) calc(100% - 20px) 50%/51% 40px repeat-y, radial-gradient(20px at 50% 25%, #000 97%, rgba(0, 0, 0, 0)) 1% calc(50% - 20px)/40px 80px repeat-y, radial-gradient(20px at 50% 25%, #000 97%, rgba(0, 0, 0, 0)) 99% calc(50% - 60px)/40px 80px repeat-y;
    --op-mask-edge-zig-zag-top: conic-gradient(from 135deg at top, rgba(0, 0, 0, 0), #000 1deg 90deg, rgba(0, 0, 0, 0) 91deg) 50%/40px 100%;
    --op-mask-edge-zig-zag-bottom: conic-gradient(from -45deg at bottom, rgba(0, 0, 0, 0), #000 1deg 90deg, rgba(0, 0, 0, 0) 91deg) 50%/40px 100%;
    --op-mask-edge-zig-zag-left: conic-gradient(from 45deg at left, rgba(0, 0, 0, 0), #000 1deg 90deg, rgba(0, 0, 0, 0) 91deg) 50%/100% 40px;
    --op-mask-edge-zig-zag-right: conic-gradient(from -135deg at right, rgba(0, 0, 0, 0), #000 1deg 90deg, rgba(0, 0, 0, 0) 91deg) 50%/100% 40px;
    --op-mask-edge-zig-zag-horizontal: conic-gradient(from 45deg at left, rgba(0, 0, 0, 0), #000 1deg 90deg, rgba(0, 0, 0, 0) 91deg) left/51% 40px repeat-y, conic-gradient(from -135deg at right, rgba(0, 0, 0, 0), #000 1deg 90deg, rgba(0, 0, 0, 0) 91deg) right/51% 40px repeat-y;
    --op-mask-edge-zig-zag-vertical: conic-gradient(from 135deg at top, rgba(0, 0, 0, 0), #000 1deg 90deg, rgba(0, 0, 0, 0) 91deg) top/40px 51% repeat-x, conic-gradient(from -45deg at bottom, rgba(0, 0, 0, 0), #000 1deg 90deg, rgba(0, 0, 0, 0) 91deg) bottom/40px 51% repeat-x;
    --op-mask-corner-cut-circles-1: radial-gradient(1rem at 1rem 1rem, rgba(0, 0, 0, 0) 99%, #000) -1rem -1rem;
    --op-mask-corner-cut-circles-2: radial-gradient(2rem at 2rem 2rem, rgba(0, 0, 0, 0) 99%, #000) -2rem -2rem;
    --op-mask-corner-cut-circles-3: radial-gradient(4rem at 4rem 4rem, rgba(0, 0, 0, 0) 99%, #000) -4rem -4rem;
    --op-mask-corner-cut-squares-1: conic-gradient(at 2rem 2rem, #000 75%, rgba(0, 0, 0, 0) 0) -1rem -1rem;
    --op-mask-corner-cut-squares-2: conic-gradient(at 4rem 4rem, #000 75%, rgba(0, 0, 0, 0) 0) -2rem -2rem;
    --op-mask-corner-cut-squares-3: conic-gradient(at 8rem 8rem, #000 75%, rgba(0, 0, 0, 0) 0) -4rem -4rem;
    --op-mask-corner-cut-angles-1: conic-gradient(from -45deg at 1rem 1rem, rgba(0, 0, 0, 0) 25%, #000 0) -1rem 0/100% 51% repeat-x, conic-gradient(from 135deg at 1rem calc(100% - 1rem), rgba(0, 0, 0, 0) 25%, #000 0) -1rem 100%/100% 51% repeat-x;
    --op-mask-corner-cut-angles-2: conic-gradient(from -45deg at 2rem 2rem, rgba(0, 0, 0, 0) 25%, #000 0) -2rem 0/100% 51% repeat-x, conic-gradient(from 135deg at 2rem calc(100% - 2rem), rgba(0, 0, 0, 0) 25%, #000 0) -2rem 100%/100% 51% repeat-x;
    --op-mask-corner-cut-angles-3: conic-gradient(from -45deg at 4rem 4rem, rgba(0, 0, 0, 0) 25%, #000 0) -4rem 0/100% 51% repeat-x, conic-gradient(from 135deg at 4rem calc(100% - 4rem), rgba(0, 0, 0, 0) 25%, #000 0) -4rem 100%/100% 51% repeat-x;
  }
}
@layer purity.theme {
  :where(html) {
    --text-size-increment: 1.25;
    --font-size-base-px: 16;
    --text-frame-ratio: 2.75;
    --text-frame-y: 0.725em;
    --text-frame-x: calc(var(--text-frame-y) * var(--text-frame-ratio));
    --space-increment: 1.42;
    --unit-max: 1rem;
    --unit-min: var(--unit-max)/2;
    --unit-fluid: 1vi;
    --unit: clamp(var(--unit-min, 0.25rem), var(--unit-fluid, 1vi), var(--unit-max));
    --radius: 1rem;
    --line-height-relative: 1.4em;
    --line-height-fixed: 0.375rem;
  }
}
@layer purity.theme {
  :where(html) {
    --color-dynamic: inherit;
    --color-hue: var(--primary-h);
    --primary-l: var(--color-8-l);
    --primary-c: var(--color-8-c);
    --primary-h: var(--op-hue-pink);
    --secondary-l: var(--color-8-l);
    --secondary-c: var(--color-8-c);
    --secondary-h: calc(var(--primary-h) + 120);
    --accent-l: var(--color-8-l);
    --accent-c: var(--color-8-c);
    --accent-h: calc(var(--primary-h) + 240);
    --color-0-l: 99%;
    --color-1-l: 95%;
    --color-2-l: 88%;
    --color-3-l: 80%;
    --color-4-l: 74%;
    --color-5-l: 68%;
    --color-6-l: 63%;
    --color-7-l: 58%;
    --color-8-l: 53%;
    --color-9-l: 49%;
    --color-10-l: 42%;
    --color-11-l: 35%;
    --color-12-l: 27%;
    --color-13-l: 20%;
    --color-14-l: 14%;
    --color-15-l: 11%;
    --color-0-c: 0.03;
    --color-1-c: 0.06;
    --color-2-c: 0.12;
    --color-3-c: 0.14;
    --color-4-c: 0.16;
    --color-5-c: 0.19;
    --color-6-c: 0.2;
    --color-7-c: 0.19;
    --color-8-c: 0.2;
    --color-9-c: 0.19;
    --color-10-c: 0.17;
    --color-11-c: 0.15;
    --color-12-c: 0.12;
    --color-13-c: 0.09;
    --color-14-c: 0.07;
    --color-15-c: 0.05;
  }
}
@layer purity.theme {
  :where(html) {
    --font-size-base: calc(var(--font-size-base-px) / 16 * 1rem);
    --xxs-px: calc(var(--xs-px) / var(--text-size-increment));
    --xs-px: calc(var(--sm-px) / var(--text-size-increment));
    --sm-px: calc(var(--font-size-base-px) / var(--text-size-increment));
    --md-px: var(--font-size-base-px);
    --lg-px: calc(var(--md-px) * var(--text-size-increment));
    --xl-px: calc(var(--lg-px) * var(--text-size-increment));
    --display-xs-px: calc(var(--xl-px) * var(--text-size-increment));
    --display-sm-px: calc(var(--display-xs-px) * var(--text-size-increment));
    --display-md-px: calc(var(--display-sm-px) * var(--text-size-increment));
    --display-lg-px: calc(var(--display-md-px) * var(--text-size-increment));
    --display-xl-px: calc(var(--display-lg-px) * var(--text-size-increment));
    --display-2xl-px: calc(var(--display-xl-px) * var(--text-size-increment));
    --text-xxs: calc(var(--xxs-px) / 16 * 1rem);
    --text-xs: calc(var(--xs-px) / 16 * 1rem);
    --text-sm: calc(var(--sm-px) / 16 * 1rem);
    --text-md: calc(var(--md-px) / 16 * 1rem);
    --text-lg: calc(var(--lg-px) / 16 * 1rem);
    --text-xl: calc(var(--xl-px) / 16 * 1rem);
    --text-display-xs: calc(var(--display-xs-px) / 16 * 1rem);
    --text-display-sm: calc(var(--display-sm-px) / 16 * 1rem);
    --text-display-md: calc(var(--display-md-px) / 16 * 1rem);
    --text-display-lg: calc(var(--display-lg-px) / 16 * 1rem);
    --text-display-xl: calc(var(--display-xl-px) / 16 * 1rem);
    --text-display-2xl: calc(var(--display-2xl-px) / 16 * 1rem);
  }
}
@layer purity.theme {
  :where(html) {
    --font-family-sans-system-ui: system-ui, sans-serif;
    --font-family-sans-humanist: Seravek, 'Gill Sans Nova', Ubuntu, Calibri, 'DejaVu Sans', source-sans-pro, sans-serif;
    --font-family-sans-geometric-humanist: Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;
    --font-family-sans-classical-humanist: Optima, Candara, 'Noto Sans', source-sans-pro, sans-serif;
    --font-family-sans-neo-grotesque: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
    --font-family-sans-industrial: Bahnschrift, 'DIN Alternate', 'Franklin Gothic Medium', 'Nimbus Sans Narrow', sans-serif-condensed, sans-serif;
    --font-family-sans-rounded-sans: ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT', 'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif;
    --font-family-serif-transitional: Charter, 'Bitstream Charter', 'Sitka Text', Cambria, serif;
    --font-family-serif-old-style: 'Iowan Old Style', 'Palatino Linotype', 'URW Palladio L', P052, serif;
    --font-family-serif-slab-serif: Rockwell, 'Rockwell Nova', 'Roboto Slab', 'DejaVu Serif', 'Sitka Small', serif;
    --font-family-serif-antique: Superclarendon, 'Bookman Old Style', 'URW Bookman', 'URW Bookman L', 'Georgia Pro', Georgia, serif;
    --font-family-serif-didone: Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;
    --font-family-monospace-slab-serif: 'Nimbus Mono PS', 'Courier New', monospace;
    --font-family-monospace-code: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
    --font-family-cursive-handwritten: 'Segoe Print', 'Bradley Hand', Chilanka, TSCu_Comic, casual, cursive;
  }
}
/* calculations */
@layer purity.theme {
  :where(html) {
    --layout-column-min: 30ch;
    --layout-gap: var(--spacing-gutter);
    --layout-grid-min: var(--layout-column-min);
    --layout-grid-gap: var(--layout-gap);
    --layout-grid-template-columns: repeat(var(--layout-grid-auto-repeat, auto-fit), minmax(min(100%, var(--layout-grid-min)), 1fr));
    --flex-grid-min: var(--layout-column-min);
    --flex-grid-gap: var(--layout-gap);
  }
}
@layer purity.theme {
  :where(html) {
    --heading-base-font-size: 1rem;
    --heading-base-fs-min: 1rem;
    --heading-2xl-font-size: var(--text-display-2xl);
    --heading-2xl-fs-min: var(--text-display-xl);
    --heading-2xl-fs-fluid: 1.5cqi;
    --heading-xl-font-size: var(--text-display-xl);
    --heading-xl-fs-min: var(--text-display-lg);
    --heading-xl-fs-fluid: 1.5cqi;
    --heading-lg-font-size: var(--text-display-lg);
    --heading-lg-fs-min: var(--text-display-md);
    --heading-lg-fs-fluid: 1.5cqi;
    --heading-md-font-size: var(--text-display-md);
    --heading-md-fs-min: var(--text-display-sm);
    --heading-md-fs-fluid: 1cqi;
    --heading-sm-font-size: var(--text-display-sm);
    --heading-sm-fs-min: var(--text-display-xs);
    --heading-sm-fs-fluid: 1cqi;
    --heading-xs-font-size: var(--text-display-xs);
    --heading-xs-fs-min: var(--text-display-xs);
    --heading-xs-fs-fluid: 1cqi;
    --heading-xxs-font-size: var(--text-xl);
    --heading-xxs-fs-min: var(--text-xl);
    --heading-xxs-fs-fluid: 1cqi;
    --heading-font-family: var(--font-family-display, inherit);
  }
}
@layer purity.theme {
  :where(html) {
    --space-3xs: calc(var(--space-2xs) / var(--space-increment));
    --space-2xs: calc(var(--space-xs) / var(--space-increment));
    --space-xs: calc(var(--space-sm) / var(--space-increment));
    --space-sm: var(--unit);
    --space-md: calc(var(--space-sm) * var(--space-increment));
    --space-lg: calc(var(--space-md) * var(--space-increment));
    --space-xl: calc(var(--space-lg) * var(--space-increment));
    --space-2xl: calc(var(--space-xl) * var(--space-increment));
    --space-3xl: calc(var(--space-2xl) * var(--space-increment));
    --space-4xl: calc(var(--space-3xl) * var(--space-increment));
    --space-5xl: calc(var(--space-4xl) * var(--space-increment));
    --space-6xl: calc(var(--space-5xl) * var(--space-increment));
  }
}
@layer purity.theme {
  :where(html) {
    --max-wrapper-width: 1280px;
    --wrapper-padding: var(--layout-gap);
    --wrapper-padding-min: clamp(var(--layout-gap), 2vw, var(--layout-gap) * 2);
    --wrapper-inline: max(var(--wrapper-padding-min, 1rem), 50vw - var(--wrapper-width) / 2 + var(--wrapper-padding) * 2 / 2);
    --wrapper-width: calc(var(--max-wrapper-width) + var(--wrapper-padding) * 2);
    --grid-wrapper-columns: var(--start-col, var(--wrapper-inline)) var(--center-col, 1fr) var(--end-col, var(--wrapper-inline));
  }
}
@layer purity.base {
  body {
    font-family: var(--font-family-base);
    font-size: var(--text-size-base);
    line-height: calc(var(--line-height-relative, 1em) + var(--line-height-fixed, var(--spacing-xs, 0.5rem)));
    background: var(--color-global-bg);
    color: var(--color-global-text);
  }
}
@layer purity.components {
  :is(.heading, h1, h2, h3, h4, h5, h6) {
    --heading-line-height: inherit;
    --fs-max: 1rem;
    font-size: var(--heading-font-size, var(--fs-max));
    color: var(--heading-color, var(--color-surface-text));
    font-weight: var(--heading-font-weight, bold);
    text-transform: var(--heading-text-transform, none);
    font-family: var(--heading-font-family, inherit);
    letter-spacing: var(--heading-letter-spacing, normal);
    line-height: var(--heading-line-height);
    text-wrap: balance;
  }
  :is(.heading, h1, h2, h3, h4, h5, h6).fluid {
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
}
@layer purity.util {
  .heading-xxs {
    --heading-fs-fluid-viewport: 1vi;
    --heading-line-height: inherit;
    --fs-min: var(--heading-xxs-fs-min);
    --fs: var(--heading-xxs-font-size);
    --heading-font-size: var(--heading-xxs-font-size);
  }
  @supports (font-size: 1cqi) {
    .heading-xxs {
      --fs-fluid: var(--heading-xxs-fs-fluid);
    }
  }
  .heading-xs {
    --heading-fs-fluid-viewport: 1vi;
    --heading-line-height: inherit;
    --fs-min: var(--heading-xs-fs-min);
    --fs: var(--heading-xs-font-size);
    --heading-font-size: var(--heading-xs-font-size);
  }
  @supports (font-size: 1cqi) {
    .heading-xs {
      --fs-fluid: var(--heading-xs-fs-fluid);
    }
  }
  .heading-sm {
    --heading-fs-fluid-viewport: 1vi;
    --heading-line-height: inherit;
    --fs-min: var(--heading-sm-fs-min);
    --fs: var(--heading-sm-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  @supports (font-size: 1cqi) {
    .heading-sm {
      --fs-fluid: var(--heading-sm-fs-fluid);
    }
  }
  .heading-md {
    --heading-fs-fluid-viewport: 1.5vi;
    --heading-line-height: inherit;
    --fs-min: var(--heading-md-fs-min);
    --fs: var(--heading-md-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  @supports (font-size: 1cqi) {
    .heading-md {
      --fs-fluid: var(--heading-md-fs-fluid);
    }
  }
  .heading-lg {
    --heading-fs-fluid-viewport: 1.5vi;
    --heading-line-height: 1.25;
    --fs-min: var(--heading-lg-fs-min);
    --fs: var(--heading-lg-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  @supports (font-size: 1cqi) {
    .heading-lg {
      --fs-fluid: var(--heading-lg-fs-fluid);
    }
  }
  .heading-xl {
    --heading-fs-fluid-viewport: 1.5vi;
    --heading-line-height: 1;
    --fs-min: var(--heading-xl-fs-min);
    --fs: var(--heading-xl-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  @supports (font-size: 1cqi) {
    .heading-xl {
      --fs-fluid: var(--heading-xl-fs-fluid);
    }
  }
  .heading-2xl {
    --heading-font-weight: 600;
    --heading-line-height: 1;
    --heading-text-transform: none;
    --heading-fs-fluid-viewport: 1.5vi;
    --fs-min: var(--heading-2xl-fs-min);
    --fs: var(--heading-2xl-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  @supports (font-size: 1cqi) {
    .heading-2xl {
      --fs-fluid: var(--heading-2xl-fs-fluid);
    }
  }
  .heading-xxs-fluid {
    --fs-min: var(--heading-xxs-fs-min);
    --fs: var(--heading-xxs-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
    font-size: var(--heading-font-size);
  }
  @supports (font-size: 1cqi) {
    .heading-xxs-fluid {
      --fs-fluid: var(--heading-xxs-fs-fluid);
    }
  }
  .heading-sm-fluid {
    --fs-min: var(--heading-sm-fs-min);
    --fs: var(--heading-sm-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
    font-size: var(--heading-font-size);
  }
  @supports (font-size: 1cqi) {
    .heading-sm-fluid {
      --fs-fluid: var(--heading-sm-fs-fluid);
    }
  }
  .heading-md-fluid {
    --fs-min: var(--heading-md-fs-min);
    --fs: var(--heading-md-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
    font-size: var(--heading-font-size);
  }
  @supports (font-size: 1cqi) {
    .heading-md-fluid {
      --fs-fluid: var(--heading-md-fs-fluid);
    }
  }
  .heading-lg-fluid {
    --fs-min: var(--heading-lg-fs-min);
    --fs: var(--heading-lg-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
    font-size: var(--heading-font-size);
  }
  @supports (font-size: 1cqi) {
    .heading-lg-fluid {
      --fs-fluid: var(--heading-lg-fs-fluid);
    }
  }
  .heading-xl-fluid {
    --fs-min: var(--heading-xl-fs-min);
    --fs: var(--heading-xl-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
    font-size: var(--heading-font-size);
  }
  @supports (font-size: 1cqi) {
    .heading-xl-fluid {
      --fs-fluid: var(--heading-xl-fs-fluid);
    }
  }
  .heading-2xl-fluid {
    --fs-min: var(--heading-2xl-fs-min);
    --fs: var(--heading-2xl-font-size);
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
    font-size: var(--heading-font-size);
  }
  @supports (font-size: 1cqi) {
    .heading-2xl-fluid {
      --fs-fluid: var(--heading-2xl-fs-fluid);
    }
  }
}
/* calculations */
@layer purity.components {
  .layout-grid {
    --column-count: 4;
    --layout-grid-min: var(--layout-column-min);
    --layout-grid-gap: var(--layout-gap);
    --layout-grid-template-columns: repeat(var(--layout-grid-auto-repeat, auto-fit), minmax(min(100%, var(--layout-grid-min)), 1fr));
    display: grid;
    grid-template-columns: var(--layout-grid-template-columns);
    gap: var(--layout-grid-gap);
  }
  .layout-grid.layout-grid--column-count {
    --column-count: 4;
    --breakpoint: calc(var(--layout-grid-min) * var(--column-count) + var(--layout-grid-gap) * (var(--column-count) - 1));
    --column-size: calc(100% / var(--column-count) - var(--layout-grid-gap));
    --layout-grid-template-columns: repeat(
        var(--layout-grid-auto-repeat, auto-fit),
        minmax(
            min(
                max(var(--column-size), (100% - var(--breakpoint)) * -999),
                100%
            ),
            1fr
        )
    );
  }
  .flex-layout-grid {
    display: flex;
    flex-wrap: wrap;
    gap: var(--flex-grid-gap);
  }
  .flex-layout-grid > * {
    flex: 1 1 var(--flex-grid-min);
  }
  :is(.layout) {
    container: layout-container/inline-size;
  }
  :is(.layout-grid, .flex-layout-grid) > * {
    container: var(--grid-item-container, grid-item)/inline-size;
  }
}
/* Wrapper rules */
@layer purity-util {
  .wrapper {
    --wrapper-inline: max(var(--wrapper-padding-min, 1rem), 50vw - var(--wrapper-width) / 2 + var(--wrapper-padding) * 2 / 2);
    padding-inline: var(--wrapper-inline);
  }
  .wrapper-grid {
    --grid-wrapper-columns: var(--start-col, var(--wrapper-inline)) var(--center-col, 1fr) var(--end-col, var(--wrapper-inline));
    display: grid;
    grid-template-columns: var(--grid-wrapper-columns);
    max-width: 100vw;
  }
}
@layer purity-util {
  .flow > * + * {
    margin-block-start: var(--flow-space, 1em);
  }
  .flow > * + *:where(button:only-of-type, .btn:only-of-type, :has(> button, > .btn)) {
    --flow-space: var(--spacing-rel-6);
  }
}
@layer purity-util {
  .region {
    padding-block: var(--spacing-regions);
  }
}
@layer purity-util {
  :where(.surface, .region, .quote, .card, .p-card, .hero) {
    background-color: var(--color-surface-bg);
    color: var(--color-surface-text);
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero):is([data-surface-interact=true]):hover {
    background-color: var(--color-surface-bg-interact);
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=light] {
    --color-surface-bg: var(--color-light);
    --color-surface-text: var(--color-light-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=light] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=dark] {
    --color-surface-bg: var(--color-dark);
    --color-surface-text: var(--color-dark-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=dark] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=eggshell] {
    --color-surface-bg: var(--color-eggshell);
    --color-surface-text: var(--color-eggshell-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=eggshell] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=primary] {
    --color-surface-bg: var(--color-primary);
    --color-surface-text: var(--color-primary-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=primary] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=primary-light] {
    --color-surface-bg: var(--color-primary-light);
    --color-surface-text: var(--color-primary-light-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=primary-light] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=primary-dark] {
    --color-surface-bg: var(--color-primary-dark);
    --color-surface-text: var(--color-primary-dark-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=primary-dark] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=secondary] {
    --color-surface-bg: var(--color-secondary);
    --color-surface-text: var(--color-secondary-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=secondary] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=secondary-light] {
    --color-surface-bg: var(--color-secondary-light);
    --color-surface-text: var(--color-secondary-light-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=secondary-light] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=secondary-dark] {
    --color-surface-bg: var(--color-secondary-dark);
    --color-surface-text: var(--color-secondary-dark-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=secondary-dark] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme="accent accent-light"] {
    --color-surface-bg: var(--color-accent accent-light);
    --color-surface-text: var(--color-accent accent-light-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme="accent accent-light"] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=accent-dark] {
    --color-surface-bg: var(--color-accent-dark);
    --color-surface-text: var(--color-accent-dark-text);
    --color-surface-bg-interact: color-mix(
      in oklch,
      var(--color-surface-bg) 95%,
      oklch(
          from var(--color-surface-text)
            clamp(
              calc(var(--color-surface-bg-lightness, l) + 0.025),
              calc(
                (var(--color-surface-bg-lightness, l) - var(--threshold)) * -100
              ),
              calc(var(--color-surface-bg-lightness, l) - 0.025)
            )
            c h
        )
        5%
    );
  }
  :where(.surface, .region, .quote, .card, .p-card, .hero)[data-surface-theme=accent-dark] .btn-outline {
    --button-color: var(--color-surface-text);
    --button-color-hover: oklch(
      from var(--button-color)
        clamp(
          var(--lightest-text),
          calc((var(--button-color-lightness, l) - var(--threshold)) * -100),
          var(--darkest-text)
        )
        c h
    );
  }
}
:where(html) {
  --root-areas:
  "main-header main-header main-header"
  "main-area main-area main-area"
  "main-footer main-footer main-footer";
}

:where(html):has(.admin-header) {
  --root-areas: "admin-header admin-header admin-header"
  "main-header main-header main-header"
  "main-area main-area main-area"
  "main-footer main-footer main-footer";
}

:where(html):has(.main-aside:not(:empty)) {
  --end-col: 0;
  --root-areas:
  "main-header main-header main-header"
  "inline-start-area main-area inline-end-area"
  "main-footer main-footer main-footer";
}

@layer purity.components {
  #__nuxt {
    display: grid;
    grid-template-areas: var(--root-areas);
    grid-template-columns: var(--grid-wrapper-columns);
  }
  .main-header {
    display: grid;
    grid-area: main-header;
    grid-template-areas: "inline-start-block-start-area block-start-area inline-end-block-start-area" "inline-start-area main-area inline-end-area" "inline-start-block-end-area block-end-area inline-end-block-end-area";
    grid-auto-flow: column;
    grid-template-columns: var(--grid-wrapper-columns);
    z-index: 1;
  }
  :where(.main-header__inner) > * {
    grid-area: main-area;
  }
  .main-header__inner {
    display: contents;
  }
  :where(html):has(:not(.main-aside)) .main-area {
    display: grid;
    grid-template-columns: var(--grid-wrapper-columns);
  }
  :where(html):has(:not(.main-aside)) .main-area > * {
    grid-column: 2/2;
  }
  .main-area {
    grid-area: main-area;
  }
  .main-aside {
    grid-area: inline-start-area;
  }
  @keyframes menu-show-from-left {
    0% {
      display: none;
    }
    1% {
      display: grid;
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(0%);
    }
  }
  @keyframes menu-hide-from-left {
    0% {
      display: grid;
      transform: translateX(0%);
    }
    99% {
      display: none;
    }
    100% {
      transform: translateX(-100%);
    }
  }
  .navigation {
    margin-block: 0;
    padding: max(var(--space-xs), var(--spacing-1));
    display: grid;
    grid-template-columns: auto 1fr;
    gap: var(--spacing-gutter) var(--spacing-gutter-xl);
    align-items: center;
    flex: 1 1 auto;
    grid-area: main-area;
  }
  .navigation:has(> *:only-child) {
    grid-template-columns: 1fr;
  }
  .navigation:has(> *:nth-child(3):last-child) {
    grid-template-columns: auto 1fr auto;
  }
  .navigation[data-nav-layout=stacked] .navigation__menu {
    grid-column: 1/-1;
  }
  .navigation[data-nav-layout=stacked-centered] .navigation__brand {
    grid-column: 1/-1;
    justify-content: center;
  }
  .navigation[data-nav-layout=stacked-centered] .navigation__menu {
    grid-column: 1/-1;
    justify-content: center;
  }
  .navigation[data-nav-layout=centered] .navigation__menu {
    justify-content: center;
  }
  .navigation a:not(.btn) {
    text-decoration: none;
    padding: var(--spacing-rel-2) var(--spacing-rel-2_5);
    width: fit-content;
    color: var(--color-primary);
    border-radius: min(var(--radius), var(--space-2xs));
  }
  .navigation a:not(.btn) span {
    border-bottom: 2px solid transparent;
  }
  .navigation a:not(.btn):hover {
    background-color: var(--color-grey-1);
  }
  .navigation a:not(.btn)[aria-current] span {
    border-bottom-color: var(--color-accent);
  }
  .navigation__brand {
    display: inline-flex;
    align-items: baseline;
    gap: 0.25em;
    font-weight: bold;
    font-size: 1.25rem;
    text-decoration: none;
    height: var(--main-header-logo-height, 44px);
    grid-row: 1/1;
    grid-column: 1/1;
  }
  .navigation__brand svg {
    width: auto;
    height: 100%;
  }
  .navigation__brand span {
    /* Inclusively hidden so it is still read as a label by assistive tech */
    height: 1px;
    overflow: hidden;
    position: absolute;
    clip-path: inset(50%);
    font-size: inherit;
    line-height: 0;
  }
  .navigation__menu :is(button, a) {
    letter-spacing: 0.03em;
    font-weight: 600;
    color: var(--color-primary);
  }
  .navigation__menu button {
    z-index: 1;
    margin-inline: auto 0;
  }
  .navigation__menu__menu {
    gap: 0.5rem;
    position: absolute;
    top: 0;
  }
  .navigation__actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
  .navigation {
    container: navigation/inline-size;
  }
  .navigation__menu {
    container: menu/inline-size;
    display: flex;
  }
  :where(.navigation__menu) {
    align-self: stretch;
    justify-content: flex-start;
    align-items: center;
  }
  @container navigation (inline-size >= 55ch) {
    .navigation__brand span {
      height: auto;
      overflow: unset;
      position: unset;
      clip-path: unset;
      line-height: unset;
    }
  }
  @container navigation (inline-size >= 60ch) {
    .navigation__menu button {
      display: none;
    }
    .navigation__menu__menu {
      position: relative;
      display: flex;
      --nav-menu-bg: var(--nav-menu-show-bg, transparent);
    }
  }
  .navigation__menu:has(:nth-child(6)) {
    --show-menu: true;
  }
  @container navigation (40ch <= inline-size <= 60ch) {
    .navigation:not([data-show-menu]) .btn:where([aria-expanded=false]) + .navigation__menu__menu {
      display: none;
      animation: var(--menu-hide, menu-hide-from-left) 500ms ease-in forwards;
    }
    .navigation:not([data-show-menu]) .btn:where([aria-expanded=true]) + .navigation__menu__menu {
      animation: var(--menu-show, menu-show-from-left) 500ms ease-in forwards;
    }
    .navigation:not([data-show-menu]) .navigation__menu {
      display: contents;
    }
    .navigation:not([data-show-menu]) .navigation__menu__menu {
      height: 100dvh;
      width: 100vw;
      margin-inline: calc(-50vw + 50%);
      top: 0;
      display: grid;
      place-content: center;
      background: var(--nav-menu-bg, var(--nav-menu-hide-bg, var(--color-accent)));
    }
  }
}
@layer purity.components {
  :where(.btn, button) {
    --button-color-hover: color-mix(in oklch, var(--button-color-hover-mix-base, var(--button-color)) var(--button-color-hover-mix-base-strength, 75%), var(--button-color-hover-mix-into, white) var(--button-color-hover-mix-into-strength, 25%));
    --button-bg-hover: color-mix(in oklch, var(--button-bg-hover-mix-base, var(--button-bg)) var(--button-bg-hover-mix-base-strength, 90%), var(--button-bg-hover-mix-into, black) var(--button-bg-hover-mix-into-strength, 10%));
    display: inline-flex;
    justify-content: center;
    align-items: center;
    padding: var(--button-p, var(--text-frame-y) var(--text-frame-x));
    border: none;
    background-color: var(--button-bg, var(--color-primary));
    border-radius: var(--button-radius, var(--radius));
    font-weight: var(--button-weight, 500);
    font-size: var(--button-font-size, inherit);
    cursor: pointer;
    color: var(--button-color, var(--color-primary-text));
    letter-spacing: var(--button-letter-spacing, 0.03em);
    --button-bg: var(--color-grey-2);
    --button-color: var(--color-grey-15);
  }
  :where(.btn, button):hover {
    color: var(--button-color-hover);
    background-color: var(--button-bg-hover);
  }
  :where(.btn, button):has(.icon) {
    gap: var(--button-icon-gap, 0.5em);
  }
  .btn-neutral {
    --button-bg: var(--color-grey-12);
    --button-color: var(--color-grey-2);
  }
  .btn-primary {
    --button-bg: var(--color-primary);
    --button-color: var(--color-primary-text);
  }
  .btn-primary.btn-link {
    --button-color: var(--color-primary);
  }
  .btn-secondary {
    --button-bg: var(--color-secondary);
    --button-color: var(--color-secondary-text);
  }
  .btn-accent {
    --button-bg: var(--color-accent);
    --button-color: var(--color-accent-text);
  }
  .btn-ghost {
    --button-bg: transparent;
    --button-color: var(--color-grey-15);
  }
  .btn-link {
    --button-bg: transparent;
    --button-color: var(--color-grey-15);
    text-decoration: underline;
    --button-bg-hover: transparent;
  }
  .btn-circle {
    height: 3rem;
    width: 3rem;
    border-radius: 9999px;
    padding: 0;
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link) {
    outline: 1px solid currentColor;
    --button-bg: transparent;
    --button-bg-hover: var(--button-color);
    --button-color: var(--color-grey-12);
    --button-color-hover: var(--color-grey-2);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-primary {
    --button-color: var(--color-primary);
    --button-color-hover: var(--color-primary-text);
    --button-bg-hover: var(--color-primary);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-secondary {
    --button-color: var(--color-secondary);
    --button-color-hover: var(--color-secondary-text);
    --button-bg-hover: var(--color-secondary);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-accent {
    --button-color: var(--color-accent);
    --button-color-hover: var(--color-accent-text);
    --button-bg-hover: var(--color-accent);
  }
  :where(.btn, button):is(.btn-outline):not(.btn-ghost, .btn-link).btn-neutral {
    --button-color: var(--color-grey-12);
    --button-color-hover: var(--color-grey-2);
  }
}
@layer purity.components {
  :where(.card, .p-card) {
    --color-surface-bg: transparent;
    --card-two-columns: var(--card-left-col, 1fr) var(--card-right-col, 1fr);
    --card-gutter-stacked: var(--spacing-gutter);
    grid-template-columns: var(--card-columns, 1fr);
    background-color: var(--card-bg, var(--color-surface-bg));
    position: relative;
    border: var(--field-border-width, 1px) solid var(--field-border-color);
    border-radius: var(--card-radius, var(--radius));
    height: 100%;
    gap: var(--card-gutter, var(--card-gutter-stacked));
    aspect-ratio: var(--card-aspect, none);
    display: grid;
    padding: var(--card-padding, 0);
  }
  :where(.card, .p-card) :is(h2, h3):not(.heading) {
    text-wrap: balance;
  }
  :where(.card, .p-card):is([data-card-row-justify=start]) {
    justify-content: start;
  }
  :where(.card, .p-card):is([data-card-row-justify=center]) {
    justify-content: center;
  }
  :where(.card, .p-card):is([data-card-row-justify=end]) {
    justify-content: end;
  }
  :where(.card, .p-card):is([data-card-row-justify=stretch]) {
    justify-content: stretch;
  }
  :where(.card, .p-card):is([data-card-row-justify=space-between]) {
    justify-content: space-between;
  }
  :where(.card, .p-card):is([data-card-row-justify=space-around]) {
    justify-content: space-around;
  }
  :where(.card, .p-card):is([data-card-row-justify=space-evenly]) {
    justify-content: space-evenly;
  }
  :where(.card, .p-card):is([data-card-row-justify=safe]) {
    justify-content: safe center;
  }
  :where(.card, .p-card):is([data-card-row-justify=unsafe]) {
    justify-content: unsafe center;
  }
  :where(.card, .p-card):is([data-card-row-align=start]) {
    align-items: start;
  }
  :where(.card, .p-card):is([data-card-row-align=center]) {
    align-items: center;
  }
  :where(.card, .p-card):is([data-card-row-align=end]) {
    align-items: end;
  }
  :where(.card, .p-card):is([data-card-row-align=stretch]) {
    align-items: stretch;
  }
  :where(.card, .p-card):is([data-card-row-align=baseline]) {
    align-items: baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=first]) {
    align-items: first baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=last]) {
    align-items: last baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=safe]) {
    align-items: safe center;
  }
  :where(.card, .p-card):is([data-card-row-align=unsafe]) {
    align-items: unsafe center;
  }
  :where(.card, .p-card):is([data-card-row-align=self-start]) {
    align-self: start;
  }
  :where(.card, .p-card):is([data-card-row-align=self-center]) {
    align-self: center;
  }
  :where(.card, .p-card):is([data-card-row-align=self-end]) {
    align-self: end;
  }
  :where(.card, .p-card):is([data-card-row-align=self-stretch]) {
    align-self: stretch;
  }
  :where(.card, .p-card):is([data-card-row-align=self-baseline]) {
    align-self: baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=self-first]) {
    align-self: first baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=self-last]) {
    align-self: last baseline;
  }
  :where(.card, .p-card):is([data-card-row-align=self-safe]) {
    align-self: safe center;
  }
  :where(.card, .p-card):is([data-card-row-align=self-unsafe]) {
    align-self: unsafe center;
  }
  :where(.card, .p-card):is([data-card-row-align=self-auto]) {
    align-self: auto;
  }
  :where(.card, .p-card):is([data-card-row-align=self-normal]) {
    align-self: normal;
  }
  :where(.card, .p-card):is([data-card-row-text-align=start]) .card-body {
    text-align: start;
  }
  :where(.card, .p-card):is([data-card-row-text-align=center]) .card-body {
    text-align: center;
  }
  :where(.card, .p-card):is([data-card-row-text-align=end]) .card-body {
    text-align: end;
  }
  :where(.card, .p-card)[data-card-overlay-image=true] {
    display: grid;
    grid-template: 1fr/1fr;
    height: auto;
  }
  :where(.card, .p-card)[data-card-overlay-image=true] :is(.card-picture, .p-card-header, .card-body, .p-card-body) {
    height: 100%;
    grid-column: 1/1;
    grid-row: 1/1;
    position: relative;
  }
  :where(.card, .p-card)[data-card-overlay-image=true] .card-body, :where(.card, .p-card)[data-card-overlay-image=true] .p-card-body {
    z-index: 1;
    display: grid;
    justify-content: flex-start;
    align-content: flex-end;
  }
  :where(.card, .p-card)[data-card-overlay-image=true] .card-body .card-title, :where(.card, .p-card)[data-card-overlay-image=true] .p-card-body .card-title {
    container-type: normal;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=light] {
    --card-backdrop-color-from-color: var(--color-light);
    --card-backdrop-color-to-color: var(--color-light);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=dark] {
    --card-backdrop-color-from-color: var(--color-dark);
    --card-backdrop-color-to-color: var(--color-dark);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=eggshell] {
    --card-backdrop-color-from-color: var(--color-eggshell);
    --card-backdrop-color-to-color: var(--color-eggshell);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=primary] {
    --card-backdrop-color-from-color: var(--color-primary);
    --card-backdrop-color-to-color: var(--color-primary);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=primary-light] {
    --card-backdrop-color-from-color: var(--color-primary-light);
    --card-backdrop-color-to-color: var(--color-primary-light);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=primary-dark] {
    --card-backdrop-color-from-color: var(--color-primary-dark);
    --card-backdrop-color-to-color: var(--color-primary-dark);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=secondary] {
    --card-backdrop-color-from-color: var(--color-secondary);
    --card-backdrop-color-to-color: var(--color-secondary);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=secondary-light] {
    --card-backdrop-color-from-color: var(--color-secondary-light);
    --card-backdrop-color-to-color: var(--color-secondary-light);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=secondary-dark] {
    --card-backdrop-color-from-color: var(--color-secondary-dark);
    --card-backdrop-color-to-color: var(--color-secondary-dark);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme="accent accent-light"] {
    --card-backdrop-color-from-color: var(--color-accent accent-light);
    --card-backdrop-color-to-color: var(--color-accent accent-light);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-surface-theme=accent-dark] {
    --card-backdrop-color-from-color: var(--color-accent-dark);
    --card-backdrop-color-to-color: var(--color-accent-dark);
  }
  :where(.card, .p-card)[data-card-overlay-backdrop] .card-body, :where(.card, .p-card)[data-card-overlay-backdrop] .p-card-body {
    isolation: isolate;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop] .card-body:before, :where(.card, .p-card)[data-card-overlay-backdrop] .p-card-body:before {
    content: "";
    display: block;
    width: 100%;
    inset: 0;
    position: absolute;
    height: 100%;
    border-image: var(--card-backdrop-fill, fill 0 linear-gradient(var(--card-backdrop-direction, in oklch to top), var(--card-backdrop-color-stop-from, oklch(from var(--card-backdrop-color-from-color, var(--color-light)) l c h/var(--card-backdrop-color-stop-from-opacity, 0.9)) 0%), var(--card-backdrop-color-stop-to, oklch(from var(--card-backdrop-color-to-color, var(--color-light)) l c h/var(--card-backdrop-color-stop-to-opacity, 0.15)) 100%)));
    z-index: -1;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=linear-to-top] {
    --card-backdrop-direction: in oklch to top;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=linear-to-right] {
    --card-backdrop-direction: in oklch to right;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=linear-to-bottom] {
    --card-backdrop-direction: in oklch to bottom;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=linear-to-left] {
    --card-backdrop-direction: in oklch to left;
  }
  :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-row=uniform] {
    --card-backdrop-color-stop-from-opacity: 0.45;
    --card-backdrop-color-stop-to-opacity: 0.45;
  }
  :where(.card, .p-card) :is(.btn, button):focus-visible {
    --outline-color: transparent;
  }
  :where(.card, .p-card) :is(.btn, button):only-of-type::before {
    content: "";
    position: absolute;
    inset: 0;
  }
  :where(.card, .p-card)[data-card-clip=true]:is([data-surface-theme], [class*=bg-], [data-card-overlay-image]) {
    overflow: clip;
  }
  :where(.card, .p-card):not([class*=card--side]) {
    grid-auto-flow: column;
    align-items: flex-start;
    justify-content: start;
    aspect-ratio: unset;
  }
  :where(.card, .p-card):not([class*=card--side]):has(.card-picture, .p-card-header) {
    grid-auto-flow: row;
    grid-auto-rows: max-content;
  }
  :where(.card-title, .p-card-title) {
    --heading-line-height: inherit;
    --fs-max: 1rem;
    font-size: var(--heading-font-size, var(--fs-max));
    color: var(--heading-color, var(--color-surface-text));
    font-weight: var(--heading-font-weight, bold);
    text-transform: var(--heading-text-transform, none);
    font-family: var(--heading-font-family, inherit);
    letter-spacing: var(--heading-letter-spacing, normal);
    line-height: var(--heading-line-height);
    text-wrap: balance;
    --heading-fs-fluid-viewport: 1vi;
    --heading-line-height: inherit;
    --fs-min: var(--heading-xs-fs-min);
    --fs: var(--heading-xs-font-size);
    --heading-font-size: var(--heading-xs-font-size);
    display: block;
  }
  :where(.card-title, .p-card-title).fluid {
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  @supports (font-size: 1cqi) {
    :where(.card-title, .p-card-title) {
      --fs-fluid: var(--heading-xs-fs-fluid);
    }
  }
  :where(.card-subtitle, .p-card-subtitle) {
    --heading-line-height: inherit;
    --fs-max: 1rem;
    font-size: var(--heading-font-size, var(--fs-max));
    color: var(--heading-color, var(--color-surface-text));
    font-weight: var(--heading-font-weight, bold);
    text-transform: var(--heading-text-transform, none);
    font-family: var(--heading-font-family, inherit);
    letter-spacing: var(--heading-letter-spacing, normal);
    line-height: var(--heading-line-height);
    text-wrap: balance;
    --flow-space: var(--spacing-rel-6);
    display: block;
  }
  :where(.card-subtitle, .p-card-subtitle).fluid {
    --heading-font-size: min(var(--fs), calc(var(--fs-min) + var(--fs-fluid, 3vw)));
  }
  :where(.card-picture, .p-card-header) {
    align-self: stretch;
    display: flex;
    justify-content: center;
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=auto] {
    --card-aspect: auto;
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=landscape] {
    --card-aspect: var(--aspect-landscape);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=square] {
    --card-aspect: var(--aspect-square);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=portrait] {
    --card-aspect: var(--aspect-portrait);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=widescreen] {
    --card-aspect: var(--aspect-widescreen);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=ultrawide] {
    --card-aspect: var(--aspect-ultrawide);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-aspect-row=golden] {
    --card-aspect: var(--aspect-golden);
  }
  :where(.card-picture, .p-card-header):is([data-card-picture-mask-row], [data-card-picture-mask-column]) {
    mask-image: var(--card-image-mask, none);
  }
  :where(.card-picture, .p-card-header)[data-card-picture-mask-row=linear-to-top] {
    --card-image-mask: linear-gradient(to top, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
  }
  :where(.card-picture, .p-card-header)[data-card-picture-mask-row=linear-to-right] {
    --card-image-mask: linear-gradient(to right, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
  }
  :where(.card-picture, .p-card-header)[data-card-picture-mask-row=linear-to-bottom] {
    --card-image-mask: linear-gradient(to bottom, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
  }
  :where(.card-picture, .p-card-header)[data-card-picture-mask-row=linear-to-left] {
    --card-image-mask: linear-gradient(to left, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
  }
  :where(.card-picture, .p-card-header) img {
    aspect-ratio: var(--card-aspect, var(--aspect-landscape));
    height: 100%;
    object-fit: cover;
  }
  :where(.card-picture, .p-card-header):empty {
    display: none;
  }
  :where(.card-body, .p-card-body, .card-caption, .p-card-caption, .card-content, .p-card-content, .card-footer, .p-card-footer) > * + * {
    margin-block-start: var(--flow-space, 1em);
  }
  :where(.card-body, .p-card-body, .card-caption, .p-card-caption, .card-content, .p-card-content, .card-footer, .p-card-footer) > * + *:where(button:only-of-type, .btn:only-of-type, :has(> button, > .btn)) {
    --flow-space: var(--spacing-rel-6);
  }
  :where(.card-body, .p-card-body) {
    padding: var(--card-body-padding, 0);
    display: block;
  }
  :where(.card, .p-card):is([class*=bg-], [data-surface-theme], [class*="--color-surface-bg"], [data-card-overlay-image]) {
    --card-body-padding: var(--spacing-card-component);
  }
  :where(.card, .p-card):is([class*=bg-], [data-surface-theme], [class*="--color-surface-bg"], [data-card-overlay-image]):focus-within {
    outline: 3px solid var(--color-surface-bg-interact);
    outline-offset: -6px;
  }
  :where(.card, .p-card):is([class*=bg-], [data-surface-theme], [class*="--color-surface-bg"]):is(.card--stacked):has(:where(.card-picture, .p-card-header:not(.hidden, [class*=order-])) + :where(.card-body, .p-card-body)) :where(.card-body, .p-card-body) {
    padding-block-start: 0;
  }
  @container (inline-size <= 80ch) {
    :where(.card, .p-card):is([class*=bg-], [data-surface-theme], [class*="--color-surface-bg"]):has(:where(.card-picture, .p-card-header:not(.hidden, [class*=order-]))) :where(.card-body, .p-card-body) {
      padding-block-start: 0;
    }
    :where(.card, .p-card):not([class*=card--side]):has(.card-picture, .p-card-header) {
      grid-auto-rows: max-content;
    }
    :where(.card, .p-card):is([data-card-reverse-order-row=true]) .card-picture, :where(.card, .p-card):is([data-card-reverse-order-row=true]) .p-card-header {
      order: 2;
    }
  }
  @container (inline-size > 80ch) {
    :where(.card, .p-card) {
      --card-gutter: var(--card-gutter-cols-gutter, var(--spacing-gutter-xl));
      max-width: 100%;
    }
    :where(.card, .p-card):where([data-card-column-justify]) .card-body {
      display: flex;
      flex-wrap: wrap;
    }
    :where(.card, .p-card):where([data-card-column-justify]) .card-body > :is(.card-caption, .card-content, .card-footer) {
      flex: 1 1 100%;
    }
    :where(.card, .p-card):is([data-card-column-justify=start]) .card-body {
      justify-content: start;
    }
    :where(.card, .p-card):is([data-card-column-justify=center]) .card-body {
      justify-content: center;
    }
    :where(.card, .p-card):is([data-card-column-justify=end]) .card-body {
      justify-content: end;
    }
    :where(.card, .p-card):is([data-card-column-justify=stretch]) .card-body {
      justify-content: stretch;
    }
    :where(.card, .p-card):is([data-card-column-justify=space-between]) .card-body {
      justify-content: space-between;
    }
    :where(.card, .p-card):is([data-card-column-justify=space-around]) .card-body {
      justify-content: space-around;
    }
    :where(.card, .p-card):is([data-card-column-justify=space-evenly]) .card-body {
      justify-content: space-evenly;
    }
    :where(.card, .p-card):is([data-card-column-justify=safe]) .card-body {
      justify-content: safe center;
    }
    :where(.card, .p-card):is([data-card-column-justify=unsafe]) .card-body {
      justify-content: unsafe center;
    }
    :where(.card, .p-card):is([data-card-column-align=start]) {
      align-items: start;
    }
    :where(.card, .p-card):is([data-card-column-align=center]) {
      align-items: center;
    }
    :where(.card, .p-card):is([data-card-column-align=end]) {
      align-items: end;
    }
    :where(.card, .p-card):is([data-card-column-align=stretch]) {
      align-items: stretch;
    }
    :where(.card, .p-card):is([data-card-column-align=baseline]) {
      align-items: baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=first]) {
      align-items: first baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=last]) {
      align-items: last baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=safe]) {
      align-items: safe center;
    }
    :where(.card, .p-card):is([data-card-column-align=unsafe]) {
      align-items: unsafe center;
    }
    :where(.card, .p-card):is([data-card-column-align=self-start]) {
      align-self: start;
    }
    :where(.card, .p-card):is([data-card-column-align=self-center]) {
      align-self: center;
    }
    :where(.card, .p-card):is([data-card-column-align=self-end]) {
      align-self: end;
    }
    :where(.card, .p-card):is([data-card-column-align=self-stretch]) {
      align-self: stretch;
    }
    :where(.card, .p-card):is([data-card-column-align=self-baseline]) {
      align-self: baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=self-first]) {
      align-self: first baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=self-last]) {
      align-self: last baseline;
    }
    :where(.card, .p-card):is([data-card-column-align=self-safe]) {
      align-self: safe center;
    }
    :where(.card, .p-card) :is([data-card-column-align=self-unsafe]) {
      align-self: unsafe center;
    }
    :where(.card, .p-card) :is([data-card-column-align=self-auto]) {
      align-self: auto;
    }
    :where(.card, .p-card) :is([data-card-column-align=self-normal]) {
      align-self: normal;
    }
    :where(.card, .p-card):is([data-card-column-text-align=start]) .card-body {
      text-align: start;
    }
    :where(.card, .p-card):is([data-card-column-text-align=center]) .card-body {
      text-align: center;
    }
    :where(.card, .p-card):is([data-card-column-text-align=end]) .card-body {
      text-align: end;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=linear-to-top] {
      --card-backdrop-direction: in oklch to top;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=linear-to-right] {
      --card-backdrop-direction: in oklch to right;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=linear-to-bottom] {
      --card-backdrop-direction: in oklch to bottom;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=linear-to-left] {
      --card-backdrop-direction: in oklch to left;
    }
    :where(.card, .p-card)[data-card-overlay-backdrop][data-card-overlay-backdrop-direction-column=uniform] {
      --card-backdrop-color-stop-from-opacity: 0.45;
      --card-backdrop-color-stop-to-opacity: 0.45;
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column] {
      --card-aspect: var(--card-aspect-cols, auto);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=auto] {
      --card-aspect-cols: auto;
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=landscape] {
      --card-aspect-cols: var(--aspect-landscape);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=square] {
      --card-aspect-cols: var(--aspect-square);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=portrait] {
      --card-aspect-cols: var(--aspect-portrait);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=widescreen] {
      --card-aspect-cols: var(--aspect-widescreen);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=ultrawide] {
      --card-aspect-cols: var(--aspect-ultrawide);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-aspect-column=golden] {
      --card-aspect-cols: var(--aspect-golden);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column] {
      --card-image-mask: var(--card-image-mask-column, none);
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column=linear-to-top] {
      --card-image-mask-column: linear-gradient(to top, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column=linear-to-right] {
      --card-image-mask-column: linear-gradient(to right, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column=linear-to-bottom] {
      --card-image-mask-column: linear-gradient(to bottom, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
    }
    :where(.card-picture, .p-card-header)[data-card-picture-mask-column=linear-to-left] {
      --card-image-mask-column: linear-gradient(to left, var(--card-image-mask-color-from, oklch(from var(--color-dark) l c h/1) 0%), var(--card-image-mask-color-to, oklch(from var(--color-dark) l c h/0) 70%));
    }
  }
  @container (inline-size > 35ch) {
    :where(.card-picture, .p-card-header) {
      order: -1;
    }
    :where(.card-picture, .p-card-header) img {
      width: 100%;
    }
  }
  :where(.card, .p-card):is([class*=card--side]):has(.card-picture, .p-card-header) {
    --card-columns: var(--card-two-columns);
    --card-gap: calc(var(--card-p) * 2);
    grid-auto-flow: column;
  }
  :where(.card, .p-card):is([class*=card--side]):has(.card-picture:is(empty)) {
    --card-columns: 1fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(.p-card-header:is(empty)) {
    --card-columns: 1fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(:is(.card-picture, .p-card-header):first-child + :is(.card-body, .p-card-body)) {
    --card-left-col: 0.6fr;
    --card-right-col: 0.4fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(:is(.card-picture, .p-card-header):is([data-card-picture-aspect-column=square]):first-child + :is(.card-body, .p-card-body)) {
    --card-left-col: 0.5fr;
    --card-right-col: 0.5fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .p-card-header)) {
    --card-left-col: 0.4fr;
    --card-right-col: 0.6fr;
  }
  :where(.card, .p-card):is([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .p-card-header):is([data-card-picture-aspect-column=square])) {
    --card-left-col: 0.5fr;
    --card-right-col: 0.5fr;
  }
  @container (inline-size > 80ch) {
    :where(.card, .p-card):not([class*=card--side]):has(.card-picture, .p-card-header) {
      --card-columns: var(--card-two-columns);
      --card-gap: calc(var(--card-p) * 2);
      grid-auto-flow: column;
    }
    :where(.card, .p-card):not([class*=card--side]):has(.card-picture:is(:empty)) {
      --card-columns: 1fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(.p-card-header:is(:empty)) {
      --card-columns: 1fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-picture, .p-card-header):first-child + :is(.card-body, .p-card-body)) {
      --card-left-col: 0.6fr;
      --card-right-col: 0.4fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-picture, .p-card-header):is([data-card-picture-aspect-column=square]):first-child + :is(.card-body, .p-card-body)) {
      --card-left-col: 0.5fr;
      --card-right-col: 0.5fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .p-card-header)) {
      --card-left-col: 0.4fr;
      --card-right-col: 0.6fr;
    }
    :where(.card, .p-card):not([class*=card--side]):has(:is(.card-body, .p-card-body):first-child + :is(.card-picture, .p-card-header):is([data-card-picture-aspect-column=square])) {
      --card-left-col: 0.5fr;
      --card-right-col: 0.5fr;
    }
    :where(.card-picture, .p-card-header) {
      order: initial;
    }
    :where(.card, .p-card):is([data-card-reverse-order-column=true]) .card-picture, :where(.card, .p-card):is([data-card-reverse-order-column=true]) .p-card-header {
      order: 2;
    }
  }
  :is(.card, .p-card).card--stacked {
    --card-columns: 1fr;
    --card-gutter: var(--card-gutter-stacked);
    grid-auto-flow: row;
  }
  :where(.card-footer, .p-card-footer) {
    max-width: max-content;
  }
}
@layer purity.components {
  :where(.c-header-main).fixed + main .hero-content__text {
    padding-block-start: calc(var(--header-min-h) + var(--layout-gap));
  }
  :where(.c-header-main).fixed + main .hero--min-h-screen {
    --hero-min-h: min(1000px, 100dvb);
  }
  .hero--min-h-screen {
    --hero-min-h: min(1000px, calc(100dvb - var(--header-min-h)));
  }
  .hero--full-overlay {
    grid: 1fr/1fr;
  }
  .hero--full-overlay .hero-content {
    display: grid;
    grid: 1fr/1fr;
  }
  .hero--full-overlay :is(.hero__container, .hero__content, .hero-content__text, .hero-content__image) {
    grid-column: 1/1;
    grid-row: 1/1;
  }
  .hero--full-overlay .hero-content__text {
    z-index: 1;
    width: 100%;
    height: 100%;
  }
  .hero--full-overlay .hero-content__image {
    width: 100vw;
    margin-inline: calc(-50vw + 50%);
    position: absolute;
    height: 100%;
    max-height: 100%;
  }
  .hero--full-overlay .hero-content__image img {
    width: 100%;
  }
  .hero--full-overlay.is-overlay .hero-content__image {
    isolation: isolate;
  }
  .hero--full-overlay.is-overlay .hero-content__image:before {
    content: "";
    display: block;
    width: 100%;
    inset: 0;
    position: absolute;
    height: 100%;
    border-image: var(--card-backdrop-fill, fill 0 linear-gradient(var(--card-backdrop-direction, in oklch to top), var(--card-backdrop-color-stop-from, oklch(from var(--card-backdrop-color-from-color, var(--color-light)) l c h/var(--card-backdrop-color-stop-from-opacity, 0.9)) 0%), var(--card-backdrop-color-stop-to, oklch(from var(--card-backdrop-color-to-color, var(--color-light)) l c h/var(--card-backdrop-color-stop-to-opacity, 0.15)) 100%)));
    z-index: -1;
  }
  :where(.hero--full-overlay) .hero-content__text {
    text-align: center;
  }
  :where(.hero--full-overlay) *:has(> .button) {
    justify-content: center;
  }
  .hero--top-down .hero-content__container {
    flex-direction: column;
    flex-wrap: nowrap;
  }
  .hero--top-down .hero-content {
    --layout-column-min: 100%;
  }
  .hero--top-down .hero-content__text {
    container: none;
    flex-grow: 1;
    padding-block-start: calc(var(--layout-gap) * 2);
  }
  .hero--top-down .hero-content__text:has(+ *) {
    padding-block-end: 0;
  }
  .hero--top-down .hero-content__text:has(+ *) {
    padding-block-end: 0;
  }
  :where(.hero--top-down) .hero-content__text {
    text-align: center;
  }
  :where(.hero--top-down) *:has(> .button) {
    justify-content: center;
  }
  .hero {
    display: grid;
    position: relative;
    aspect-ratio: var(--hero-aspect, 16 / 7);
    background-color: var(--hero-bg, var(--color-surface-bg));
  }
  .hero .navigation__brand {
    font-size: 4rem;
  }
  .hero .navigation__brand span {
    all: unset;
  }
  .hero__container {
    height: 100%;
  }
  .hero-content {
    position: relative;
  }
  :is(.hero, .hero__container, .hero-content) {
    display: grid;
  }
  :is(.hero__container, .hero__content, .hero__content > *) {
    flex: 1 1 auto;
  }
  .hero-content__container {
    --flex-grid-min: 45ch;
  }
  .hero-content__text {
    padding-block: var(--layout-gap);
  }
  .hero-content__image {
    display: flex;
    justify-content: center;
  }
  :where(.hero-content__image img) {
    object-fit: cover;
  }
  @container layout-container (inline-size < 120ch) {
    .hero-content {
      --layout-column-min: 100%;
    }
    .hero-content__text:has(+ *) {
      padding-block-start: 0;
    }
  }
  @container layout-container (inline-size > 120ch) {
    .hero-content__text {
      --flex-grid-min: 65ch;
      flex-grow: 0;
    }
  }
}
@layer purity.components {
  :where(blockquote, q) {
    font-family: var(--font-family-quote, var(--font-family-serif));
  }
  .quote {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-gutter-sm);
  }
  .quote img.quote__avatar {
    aspect-ratio: 1/1;
    border-radius: 50%;
    width: clamp(4rem, 30%, 6rem);
    flex-shrink: 0;
    object-fit: cover;
  }
  .quote q {
    quotes: none;
  }
}
@layer purity-tw.theme {
  @theme {
    --font-family-*: initial;
    --font-family-base: var(--font-family-sans);
    --font-family-display: var(--font-family-sans-humanist);
    --font-family-sans: var(--font-family-sans-system-ui);
    --font-family-serif: var(--font-family-serif-didone);
    --font-family-mono: var(--font-family-monospace-slab-serif);
    --breakpoint-sm: 640px;
    --breakpoint-md: 768px;
    --breakpoint-lg: 1024px;
    --breakpoint-xl: 1280px;
    --breakpoint-2xl: 1536px;
    --breakpoint-3xl: 1920px;
    --container-3xl: 48rem;
    --container-4xl: 56rem;
    --container-5xl: 64rem;
    --container-6xl: 72rem;
    --container-7xl: 80rem;
    --size-3xs: 16rem;
    --size-2xs: 18rem;
    --size-xs: 20rem;
    --size-sm: 24rem;
    --size-md: 28rem;
    --size-lg: 32rem;
    --size-xl: 36rem;
    --size-2xl: 42rem;
    --size-3xl: 48rem;
    --size-4xl: 56rem;
    --size-5xl: 64rem;
    --size-6xl: 72rem;
    --size-7xl: 80rem;
    --color-*: initial;
    --color-global-bg: var(--color-light);
    --color-global-text: var(--color-midnight);
    --color-surface-bg: none;
    --color-surface-bg-interact: var(--color-light-shade);
    --color-surface-text: var(--color-global-text);
    --color-surface-text-interact: var(--color-dark);
    --color-light: #ffffff;
    --color-light-shade: var(--color-grey-1);
    --color-light-text: var(--color-global-text);
    --color-dark: #000000;
    --color-dark-text: var(--color-eggshell);
    --color-mid: var(--color-grey-3);
    --color-mid-shade: var(--color-grey-4);
    --color-midnight: var(--color-grey-12);
    --color-midnight-shade: var(--color-grey-15);
    --color-eggshell: color-mix(in oklch, var(--color-grey-1) 80%, var(--color-light) 20%);
    --color-slate: var(--color-grey-6);
    --color-primary: oklch(var(--primary-l) var(--primary-c) var(--primary-h));
    --color-primary-text: oklch(from var(--color-primary) var(--color-primary-l-text, clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text)))) var(--color-primary-c-text, c) var(--color-primary-h-text, h));
    --color-primary-text-soft: color-mix(in oklch, var(--color-primary-text) 80%, black 20%);
    --color-primary-light: var(--color-primary-0);
    --color-primary-light-text: var(--color-primary-0-text);
    --color-primary-dark: var(--color-primary-12);
    --color-primary-dark-text: var(--color-primary-12-text);
    --color-secondary: oklch(var(--secondary-l) var(--secondary-c) var(--secondary-h));
    --color-secondary-text: oklch(from var(--color-secondary) var(--color-secondary-l-text, clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text)))) var(--color-secondary-c-text, c) var(--color-secondary-h-text, h));
    --color-secondary-text-soft: color-mix(in oklch, var(--color-secondary-text) 80%, black 20%);
    --color-secondary-light: var(--color-secondary-0);
    --color-secondary-light-text: var(--color-secondary-0-text);
    --color-secondary-dark: var(--color-secondary-12);
    --color-secondary-dark-text: var(--color-secondary-12-text);
    --color-accent: oklch(var(--accent-l) var(--accent-c) var(--accent-h));
    --color-accent-text: oklch(from var(--color-accent) var(--color-accent-l-text, clamp(var(--color-accent-lightest-text, var(--lightest-text)), (var(--color-accent-lightness, l) - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text)))) var(--color-accent-c-text, c) var(--color-accent-h-text, h));
    --color-accent-text-soft: color-mix(in oklch, var(--color-accent-text) 80%, black 20%);
    --color-accent-light: var(--color-accent-0);
    --color-accent-light-text: var(--color-accent-0-text);
    --color-accent-dark: var(--color-accent-12);
    --color-accent-dark-text: var(--color-accent-12-text);
    --color-dynamic: oklch(var(--color-l, var(--color-8-l)) var(--color-c, var(--color-8-c)) var(--color-hue));
    --color-0: var(--op-color-0);
    --color-grey-0: oklch(from var(--color-primary) var(--grey-0-l, var(--color-0-l)) var(--grey-0-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-1: oklch(from var(--color-primary) var(--grey-1-l, var(--color-1-l)) var(--grey-1-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-2: oklch(from var(--color-primary) var(--grey-2-l, var(--color-2-l)) var(--grey-2-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-3: oklch(from var(--color-primary) var(--grey-3-l, var(--color-3-l)) var(--grey-3-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-4: oklch(from var(--color-primary) var(--grey-4-l, var(--color-4-l)) var(--grey-4-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-5: oklch(from var(--color-primary) var(--grey-5-l, var(--color-5-l)) var(--grey-5-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-6: oklch(from var(--color-primary) var(--grey-6-l, var(--color-6-l)) var(--grey-6-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-7: oklch(from var(--color-primary) var(--grey-7-l, var(--color-7-l)) var(--grey-7-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-8: oklch(from var(--color-primary) var(--grey-8-l, var(--color-8-l)) var(--grey-8-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-9: oklch(from var(--color-primary) var(--grey-9-l, var(--color-9-l)) var(--grey-9-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-10: oklch(from var(--color-primary) var(--grey-10-l, var(--color-10-l)) var(--grey-10-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-11: oklch(from var(--color-primary) var(--grey-11-l, var(--color-11-l)) var(--grey-11-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-12: oklch(from var(--color-primary) var(--grey-12-l, var(--color-12-l)) var(--grey-12-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-13: oklch(from var(--color-primary) var(--grey-13-l, var(--color-13-l)) var(--grey-13-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-14: oklch(from var(--color-primary) var(--grey-14-l, var(--color-14-l)) var(--grey-14-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-grey-15: oklch(from var(--color-primary) var(--grey-15-l, var(--color-15-l)) var(--grey-15-c, calc(var(--grey-default-c, c) - 0.195)) h);
    --color-primary-0: oklch(from var(--color-primary) var(--primary-0-l, var(--color-0-l)) var(--primary-0-c, var(--color-0-c, c)) h);
    --color-primary-1: oklch(from var(--color-primary) var(--primary-1-l, var(--color-1-l)) var(--primary-1-c, var(--color-1-c, c)) h);
    --color-primary-2: oklch(from var(--color-primary) var(--primary-2-l, var(--color-2-l)) var(--primary-2-c, var(--color-2-c, c)) h);
    --color-primary-3: oklch(from var(--color-primary) var(--primary-3-l, var(--color-3-l)) var(--primary-3-c, var(--color-3-c, c)) h);
    --color-primary-4: oklch(from var(--color-primary) var(--primary-4-l, var(--color-4-l)) var(--primary-4-c, var(--color-4-c, c)) h);
    --color-primary-5: oklch(from var(--color-primary) var(--primary-5-l, var(--color-5-l)) var(--primary-5-c, var(--color-5-c, c)) h);
    --color-primary-6: oklch(from var(--color-primary) var(--primary-6-l, var(--color-6-l)) var(--primary-6-c, var(--color-6-c, c)) h);
    --color-primary-7: oklch(from var(--color-primary) var(--primary-7-l, var(--color-7-l)) var(--primary-7-c, var(--color-7-c, c)) h);
    --color-primary-8: oklch(from var(--color-primary) var(--primary-8-l, var(--color-8-l)) var(--primary-8-c, var(--color-8-c, c)) h);
    --color-primary-9: oklch(from var(--color-primary) var(--primary-9-l, var(--color-9-l)) var(--primary-9-c, var(--color-9-c, c)) h);
    --color-primary-10: oklch(from var(--color-primary) var(--primary-10-l, var(--color-10-l)) var(--primary-10-c, var(--color-10-c, c)) h);
    --color-primary-11: oklch(from var(--color-primary) var(--primary-11-l, var(--color-11-l)) var(--primary-11-c, var(--color-11-c, c)) h);
    --color-primary-12: oklch(from var(--color-primary) var(--primary-12-l, var(--color-12-l)) var(--primary-12-c, var(--color-12-c, c)) h);
    --color-primary-13: oklch(from var(--color-primary) var(--primary-13-l, var(--color-13-l)) var(--primary-13-c, var(--color-13-c, c)) h);
    --color-primary-14: oklch(from var(--color-primary) var(--primary-14-l, var(--color-14-l)) var(--primary-14-c, var(--color-14-c, c)) h);
    --color-primary-15: oklch(from var(--color-primary) var(--primary-15-l, var(--color-15-l)) var(--primary-15-c, var(--color-15-c, c)) h);
    --color-secondary-0: oklch(from var(--color-secondary) var(--secondary-0-l, var(--color-0-l)) var(--secondary-0-c, var(--color-0-c, c)) h);
    --color-secondary-1: oklch(from var(--color-secondary) var(--secondary-1-l, var(--color-1-l)) var(--secondary-1-c, var(--color-1-c, c)) h);
    --color-secondary-2: oklch(from var(--color-secondary) var(--secondary-2-l, var(--color-2-l)) var(--secondary-2-c, var(--color-2-c, c)) h);
    --color-secondary-3: oklch(from var(--color-secondary) var(--secondary-3-l, var(--color-3-l)) var(--secondary-3-c, var(--color-3-c, c)) h);
    --color-secondary-4: oklch(from var(--color-secondary) var(--secondary-4-l, var(--color-4-l)) var(--secondary-4-c, var(--color-4-c, c)) h);
    --color-secondary-5: oklch(from var(--color-secondary) var(--secondary-5-l, var(--color-5-l)) var(--secondary-5-c, var(--color-5-c, c)) h);
    --color-secondary-6: oklch(from var(--color-secondary) var(--secondary-6-l, var(--color-6-l)) var(--secondary-6-c, var(--color-6-c, c)) h);
    --color-secondary-7: oklch(from var(--color-secondary) var(--secondary-7-l, var(--color-7-l)) var(--secondary-7-c, var(--color-7-c, c)) h);
    --color-secondary-8: oklch(from var(--color-secondary) var(--secondary-8-l, var(--color-8-l)) var(--secondary-8-c, var(--color-8-c, c)) h);
    --color-secondary-9: oklch(from var(--color-secondary) var(--secondary-9-l, var(--color-9-l)) var(--secondary-9-c, var(--color-9-c, c)) h);
    --color-secondary-10: oklch(from var(--color-secondary) var(--secondary-10-l, var(--color-10-l)) var(--secondary-10-c, var(--color-10-c, c)) h);
    --color-secondary-11: oklch(from var(--color-secondary) var(--secondary-11-l, var(--color-11-l)) var(--secondary-11-c, var(--color-11-c, c)) h);
    --color-secondary-12: oklch(from var(--color-secondary) var(--secondary-12-l, var(--color-12-l)) var(--secondary-12-c, var(--color-12-c)) h);
    --color-secondary-13: oklch(from var(--color-secondary) var(--secondary-13-l, var(--color-13-l)) var(--secondary-13-c, var(--color-13-c)) h);
    --color-secondary-14: oklch(from var(--color-secondary) var(--secondary-14-l, var(--color-14-l)) var(--secondary-14-c, var(--color-14-c)) h);
    --color-secondary-15: oklch(from var(--color-secondary) var(--secondary-15-l, var(--color-15-l)) var(--secondary-15-c, var(--color-15-c)) h);
    --color-accent-0: oklch(from var(--color-accent) var(--accent-0-l, var(--color-0-l)) var(--accent-0-c, var(--color-0-c, c)) h);
    --color-accent-1: oklch(from var(--color-accent) var(--accent-1-l, var(--color-1-l)) var(--accent-1-c, var(--color-1-c, c)) h);
    --color-accent-2: oklch(from var(--color-accent) var(--accent-2-l, var(--color-2-l)) var(--accent-2-c, var(--color-2-c, c)) h);
    --color-accent-3: oklch(from var(--color-accent) var(--accent-3-l, var(--color-3-l)) var(--accent-3-c, var(--color-3-c, c)) h);
    --color-accent-4: oklch(from var(--color-accent) var(--accent-4-l, var(--color-4-l)) var(--accent-4-c, var(--color-4-c, c)) h);
    --color-accent-5: oklch(from var(--color-accent) var(--accent-5-l, var(--color-5-l)) var(--accent-5-c, var(--color-5-c, c)) h);
    --color-accent-6: oklch(from var(--color-accent) var(--accent-6-l, var(--color-6-l)) var(--accent-6-c, var(--color-6-c, c)) h);
    --color-accent-7: oklch(from var(--color-accent) var(--accent-7-l, var(--color-7-l)) var(--accent-7-c, var(--color-7-c, c)) h);
    --color-accent-8: oklch(from var(--color-accent) var(--accent-8-l, var(--color-8-l)) var(--accent-8-c, var(--color-8-c, c)) h);
    --color-accent-9: oklch(from var(--color-accent) var(--accent-9-l, var(--color-9-l)) var(--accent-9-c, var(--color-9-c, c)) h);
    --color-accent-10: oklch(from var(--color-accent) var(--accent-10-l, var(--color-10-l)) var(--accent-10-c, var(--color-10-c, c)) h);
    --color-accent-11: oklch(from var(--color-accent) var(--accent-11-l, var(--color-11-l)) var(--accent-11-c, var(--color-11-c, c)) h);
    --color-accent-12: oklch(from var(--color-accent) var(--accent-12-l, var(--color-12-l)) var(--accent-12-c, var(--color-12-c)) h);
    --color-accent-13: oklch(from var(--color-accent) var(--accent-13-l, var(--color-13-l)) var(--accent-13-c, var(--color-13-c)) h);
    --color-accent-14: oklch(from var(--color-accent) var(--accent-14-l, var(--color-14-l)) var(--accent-14-c, var(--color-14-c)) h);
    --color-accent-15: oklch(from var(--color-accent) var(--accent-15-l, var(--color-15-l)) var(--accent-15-c, var(--color-15-c)) h);
    --threshold: 0.7;
    --lightest-text: 0.4;
    --darkest-text: 0.99;
    --color-primary-0-text: oklch(from var(--color-primary-0) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-1-text: oklch(from var(--color-primary-1) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-2-text: oklch(from var(--color-primary-2) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-3-text: oklch(from var(--color-primary-3) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-4-text: oklch(from var(--color-primary-4) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-5-text: oklch(from var(--color-primary-5) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-6-text: oklch(from var(--color-primary-6) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-7-text: oklch(from var(--color-primary-7) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-8-text: oklch(from var(--color-primary-8) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-9-text: oklch(from var(--color-primary-9) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-10-text: oklch(from var(--color-primary-10) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-11-text: oklch(from var(--color-primary-11) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-12-text: oklch(from var(--color-primary-12) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-13-text: oklch(from var(--color-primary-13) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-14-text: oklch(from var(--color-primary-14) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-primary-15-text: oklch(from var(--color-primary-15) clamp(var(--color-primary-lightest-text, var(--lightest-text)), (l - var(--color-primary-threshold, var(--threshold))) * -100, var(--color-primary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-0-text: oklch(from var(--color-secondary-0) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-1-text: oklch(from var(--color-secondary-1) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-2-text: oklch(from var(--color-secondary-2) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-3-text: oklch(from var(--color-secondary-3) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-4-text: oklch(from var(--color-secondary-4) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-5-text: oklch(from var(--color-secondary-5) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-6-text: oklch(from var(--color-secondary-6) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-7-text: oklch(from var(--color-secondary-7) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-8-text: oklch(from var(--color-secondary-8) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-9-text: oklch(from var(--color-secondary-9) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-10-text: oklch(from var(--color-secondary-10) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-11-text: oklch(from var(--color-secondary-11) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-12-text: oklch(from var(--color-secondary-12) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-13-text: oklch(from var(--color-secondary-13) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-14-text: oklch(from var(--color-secondary-14) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-secondary-15-text: oklch(from var(--color-secondary-15) clamp(var(--color-secondary-lightest-text, var(--lightest-text)), (l - var(--color-secondary-threshold, var(--threshold))) * -100, var(--color-secondary-darkest-text, var(--darkest-text))) c h);
    --color-accent-0-text: oklch(from var(--color-accent-0) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-1-text: oklch(from var(--color-accent-1) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-2-text: oklch(from var(--color-accent-2) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-3-text: oklch(from var(--color-accent-3) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-4-text: oklch(from var(--color-accent-4) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-5-text: oklch(from var(--color-accent-5) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-6-text: oklch(from var(--color-accent-6) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-7-text: oklch(from var(--color-accent-7) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-8-text: oklch(from var(--color-accent-8) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-9-text: oklch(from var(--color-accent-9) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-10-text: oklch(from var(--color-accent-10) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-11-text: oklch(from var(--color-accent-11) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-12-text: oklch(from var(--color-accent-12) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-13-text: oklch(from var(--color-accent-13) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-14-text: oklch(from var(--color-accent-14) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --color-accent-15-text: oklch(from var(--color-accent-15) clamp(var(--color-accent-lightest-text, var(--lightest-text)), (l - var(--color-accent-threshold, var(--threshold))) * -100, var(--color-accent-darkest-text, var(--darkest-text))) c h);
    --font-size-*: initial;
    --font-size-xxs: var(--text-xxs);
    --font-size-xs: var(--text-xs);
    --font-size-sm: var(--text-sm);
    --font-size-md: var(--text-md);
    --font-size-lg: var(--text-lg);
    --font-size-xl: var(--text-xl);
    --font-size-display-xs: var(--text-display-xs);
    --font-size-display-sm: var(--text-display-sm);
    --font-size-display-md: var(--text-display-md);
    --font-size-display-lg: var(--text-display-lg);
    --font-size-display-xl: var(--text-display-xl);
    --font-size-display-2xl: var(--text-display-2xl);
    --font-size-size-inherit: inherit;
    --spacing-3xs: var(--space-3xs);
    --spacing-2xs: var(--space-2xs);
    --spacing-xs: var(--space-xs);
    --spacing-sm: var(--space-sm);
    --spacing-md: var(--space-md);
    --spacing-lg: var(--space-lg);
    --spacing-xl: var(--space-xl);
    --spacing-2xl: var(--space-2xl);
    --spacing-3xl: var(--space-3xl);
    --spacing-4xl: var(--space-4xl);
    --spacing-5xl: var(--space-5xl);
    --spacing-6xl: var(--space-6xl);
    --spacing-rel-0_5: 0.125em;
    --spacing-rel-1: 0.25em;
    --spacing-rel-1_5: 0.375em;
    --spacing-rel-2: 0.5em;
    --spacing-rel-2_5: 0.625em;
    --spacing-rel-3: 0.75em;
    --spacing-rel-3_5: 0.875em;
    --spacing-rel-4: 1em;
    --spacing-rel-5: 1.25em;
    --spacing-rel-6: 1.5em;
    --spacing-rel-7: 1.75em;
    --spacing-rel-8: 2em;
    --spacing-rel-9: 2.25em;
    --spacing-rel-10: 2.5em;
    --spacing-rel-11: 2.75em;
    --spacing-rel-12: 3em;
    --spacing-rel-14: 3.5em;
    --spacing-rel-16: 4em;
    --spacing-rel-20: 5em;
    --spacing-rel-24: 6em;
    --spacing-gutter: var(--spacing-md);
    --spacing-gutter-sm: var(--spacing-sm);
    --spacing-gutter-lg: var(--spacing-lg);
    --spacing-gutter-xl: var(--spacing-xl);
    --spacing-regions: var(--spacing-xl);
    --spacing-card-component: clamp(var(--spacing-sm), 8cqi, var(--spacing-xl));
    --z-50: 50;
    --aspect-*: initial;
    --aspect-square: 1/1;
    --aspect-landscape: 4/3;
    --aspect-portrait: 3/4;
    --aspect-widescreen: 16/9;
    --aspect-ultrawide: 18/5;
    --aspect-golden: 1.6180/1;
  }
}
@layer purity-util {
  .hue-s {
    --color-hue: var(--secondary-h);
  }
  .grid-layout-col-count-1 {
    --column-count: 1;
  }
  .grid-layout-col-count-2 {
    --column-count: 2;
  }
  .grid-layout-col-count-3 {
    --column-count: 3;
  }
  .grid-layout-col-count-4 {
    --column-count: 4;
  }
  .grid-layout-col-count-5 {
    --column-count: 5;
  }
  .grid-layout-col-count-6 {
    --column-count: 6;
  }
  .grid-layout-col-count-7 {
    --column-count: 7;
  }
  .grid-layout-col-count-8 {
    --column-count: 8;
  }
  .grid-layout-col-count-9 {
    --column-count: 9;
  }
  .grid-layout-col-count-10 {
    --column-count: 10;
  }
  .grid-layout-col-count-11 {
    --column-count: 11;
  }
  .grid-layout-col-count-12 {
    --column-count: 12;
  }
  .grid-layout-col-count-13 {
    --column-count: 13;
  }
  .grid-layout-col-count-14 {
    --column-count: 14;
  }
  .grid-layout-col-count-15 {
    --column-count: 15;
  }
}
