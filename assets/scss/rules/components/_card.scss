@use "../../mixins/ultilities/output-props" as *;
@use "../../mixins/ultilities/str-explode" as *;
@use "../../mixins/rules/flow" as *;
@use "../../mixins/rules/headings" as h;
@use "../../mixins/rules/card" as card;
@use "../../mixins/rules/utils/backdrop" as backdrop;
@use "../../props/maps/colors" as colors;

/// Card image masking variables
$card-image-mask-color-from: oklch(from var(--color-dark) l c h / 1) 0%;
$card-image-mask-color-to: oklch(from var(--color-dark) l c h / 0) 70%;

$card-image-mask-top: linear-gradient(
  to top,
  var(--card-image-mask-color-from, #{$card-image-mask-color-from}),
  var(--card-image-mask-color-to, #{$card-image-mask-color-to})
);
$card-image-mask-right: linear-gradient(
  to right,
  var(--card-image-mask-color-from, #{$card-image-mask-color-from}),
  var(--card-image-mask-color-to, #{$card-image-mask-color-to})
);
$card-image-mask-bottom: linear-gradient(
  to bottom,
  var(--card-image-mask-color-from, #{$card-image-mask-color-from}),
  var(--card-image-mask-color-to, #{$card-image-mask-color-to})
);
$card-image-mask-left: linear-gradient(
  to left,
  var(--card-image-mask-color-from, #{$card-image-mask-color-from}),
  var(--card-image-mask-color-to, #{$card-image-mask-color-to})
);

/// Card variations
/// Default - no padding on component or body, no bg-class or data-surface-theme
/// Card with background - has bg-class or data-surface theme
/// Card with background but no picture
///
/// Create a padding prop for component and body which reference card-spacing

$card-component-selectors: ".card, .p-card";
$card-caption-selectors: ".card-caption, .p-card-caption";
$card-title-selectors: ".card-title, .p-card-title";
$card-subtitle-selectors: ".card-subtitle, .p-card-subtitle";
$card-picture-selectors: ".card-picture, .p-card-header";
$card-body-selectors: ".card-body, .p-card-body";
$card-content-selectors: ".card-content, .p-card-content";
$card-footer-selectors: ".card-footer, .p-card-footer";

@layer purity.components {
  :where(#{$card-component-selectors}) {
    @include card.default-rules();
    @include card.row-justify();
    @include card.row-align();
    @include card.row-text-align();
    &[data-card-overlay-image="true"] {
      display: grid;
      grid-template: 1fr / 1fr;
      height: auto;
      :is(#{$card-picture-selectors}, #{$card-body-selectors}) {
        height: 100%;
        grid-column: 1/1;
        grid-row: 1/1;
        position: relative;
      }
      #{$card-body-selectors} {
        z-index: 1;
        display: grid;
        justify-content: flex-start;
        align-content: flex-end;
        .card-title {
          container-type: normal;
        }
      }
    }
    &[data-card-overlay-backdrop] {
      @each $color in colors.$color-key-map {
        @include backdrop.card-backdrop-color($color);
      }
      #{$card-body-selectors} {
        @include backdrop.psuedo-card-backdrop();
      }
      @each $direction
        in (
          "linear-to-top",
          "linear-to-right",
          "linear-to-bottom",
          "linear-to-left",
          "uniform"
        )
      {
        @include backdrop.card-backdrop-direction("row", $direction);
      }
    }
    :is(.btn, button) {
      @include card.link();
    }
    &[data-card-clip="true"] {
      &:is([data-surface-theme], [class*="bg-"], [data-card-overlay-image]) {
        overflow: clip;
      }
    }
    &:not([class*="card--side"]) {
      grid-auto-flow: column;
      align-items: flex-start;
      justify-content: start;
      aspect-ratio: unset;

      &:has(#{$card-picture-selectors}) {
        grid-auto-flow: row;
        grid-auto-rows: max-content;
        // grid-template-columns: 1fr;
      }
    }
  }

  :where(#{$card-title-selectors}) {
    @include h.base();
    @include h.heading-xs();
    display: block;
  }

  :where(#{$card-subtitle-selectors}) {
    @include h.base();
    --flow-space: var(--spacing-rel-6);
    display: block;
  }

  :where(#{$card-picture-selectors}) {
    align-self: stretch;
    // aspect-ratio: var(--card-aspect, var(--aspect-landscape));
    display: flex;
    justify-content: center;
    &[data-card-picture-aspect-row="auto"] {
      --card-aspect: auto;
    }
    &[data-card-picture-aspect-row="landscape"] {
      --card-aspect: var(--aspect-landscape);
    }
    &[data-card-picture-aspect-row="square"] {
      --card-aspect: var(--aspect-square);
    }
    &[data-card-picture-aspect-row="portrait"] {
      --card-aspect: var(--aspect-portrait);
    }
    &[data-card-picture-aspect-row="widescreen"] {
      --card-aspect: var(--aspect-widescreen);
    }
    &[data-card-picture-aspect-row="ultrawide"] {
      --card-aspect: var(--aspect-ultrawide);
    }
    &[data-card-picture-aspect-row="golden"] {
      --card-aspect: var(--aspect-golden);
    }
    /// Masking
    &:is([data-card-picture-mask-row], [data-card-picture-mask-column]) {
      mask-image: var(--card-image-mask, none);
    }
    &[data-card-picture-mask-row="linear-to-top"] {
      --card-image-mask: #{$card-image-mask-top};
    }
    &[data-card-picture-mask-row="linear-to-right"] {
      --card-image-mask: #{$card-image-mask-right};
    }
    &[data-card-picture-mask-row="linear-to-bottom"] {
      --card-image-mask: #{$card-image-mask-bottom};
    }
    &[data-card-picture-mask-row="linear-to-left"] {
      --card-image-mask: #{$card-image-mask-left};
    }

    img {
      aspect-ratio: var(--card-aspect, var(--aspect-landscape));
      height: 100%;
      object-fit: cover;
    }
    &:empty {
      display: none;
    }
  }

  :where(
      #{$card-body-selectors},
      #{$card-caption-selectors},
      #{$card-content-selectors},
      #{$card-footer-selectors}
    ) {
    @include flow();
  }

  :where(#{$card-body-selectors}) {
    padding: var(--card-body-padding, 0);
    display: block;
  }

  :where(#{$card-component-selectors}):is(
      [class*="bg-"],
      [data-surface-theme],
      [class*="--color-surface-bg"],
      [data-card-overlay-image]
    ) {
    --card-body-padding: var(--spacing-card-component);
    &:focus-within {
      outline: 3px solid var(--color-surface-bg-interact);
      outline-offset: -6px;
    }
  }

  :where(#{$card-component-selectors}):is(
      [class*="bg-"],
      [data-surface-theme],
      [class*="--color-surface-bg"]
    ):is(.card--stacked) {
    &:has(
        :where(#{$card-picture-selectors}:not(.hidden, [class*="order-"]))
          + :where(#{$card-body-selectors})
      )
      :where(#{$card-body-selectors}) {
      padding-block-start: 0;
      // background:red;
    }
  }

  @container (inline-size <= 80ch) {
    :where(#{$card-component-selectors}):is(
        [class*="bg-"],
        [data-surface-theme],
        [class*="--color-surface-bg"]
      ) {
      &:has(:where(#{$card-picture-selectors}:not(.hidden, [class*="order-"])))
        :where(#{$card-body-selectors}) {
        padding-block-start: 0;
        // background:red;
      }
    }
    :where(#{$card-component-selectors}) {
      &:not([class*="card--side"]) {
        &:has(#{$card-picture-selectors}) {
          grid-auto-rows: max-content;
        }
      }
    }

    //// reverse order for row
    :where(#{$card-component-selectors}):is(
        [data-card-reverse-order-row="true"]
      ) {
      #{$card-picture-selectors} {
        order: 2;
      }
    }
  }

  /// Card container queries
  // @container layout-container (inline-size > 80ch) {
  @container (inline-size > 80ch) {
    :where(#{$card-component-selectors}) {
      --card-gutter: var(--card-gutter-cols-gutter, var(--spacing-gutter-xl));
      // aspect-ratio: 4/3;
      max-width: 100%;
      @include card.column-justify();
      @include card.column-align();
      @include card.column-text-align();
      &[data-card-overlay-backdrop] {
        @each $direction
          in (
            "linear-to-top",
            "linear-to-right",
            "linear-to-bottom",
            "linear-to-left",
            "uniform"
          )
        {
          @include backdrop.card-backdrop-direction("column", $direction);
        }
      }
    }
    :where(#{$card-picture-selectors}) {
      &[data-card-picture-aspect-column] {
        --card-aspect: var(--card-aspect-cols, auto);
      }
      &[data-card-picture-aspect-column="auto"] {
        --card-aspect-cols: auto;
      }
      &[data-card-picture-aspect-column="landscape"] {
        --card-aspect-cols: var(--aspect-landscape);
      }
      &[data-card-picture-aspect-column="square"] {
        --card-aspect-cols: var(--aspect-square);
      }
      &[data-card-picture-aspect-column="portrait"] {
        --card-aspect-cols: var(--aspect-portrait);
      }
      &[data-card-picture-aspect-column="widescreen"] {
        --card-aspect-cols: var(--aspect-widescreen);
      }
      &[data-card-picture-aspect-column="ultrawide"] {
        --card-aspect-cols: var(--aspect-ultrawide);
      }
      &[data-card-picture-aspect-column="golden"] {
        --card-aspect-cols: var(--aspect-golden);
      }

      &[data-card-picture-mask-column] {
        --card-image-mask: var(--card-image-mask-column, none);
      }

      &[data-card-picture-mask-column="linear-to-top"] {
        --card-image-mask-column: #{$card-image-mask-top};
      }
      &[data-card-picture-mask-column="linear-to-right"] {
        --card-image-mask-column: #{$card-image-mask-right};
      }
      &[data-card-picture-mask-column="linear-to-bottom"] {
        --card-image-mask-column: #{$card-image-mask-bottom};
      }
      &[data-card-picture-mask-column="linear-to-left"] {
        --card-image-mask-column: #{$card-image-mask-left};
      }
    }
  }

  // @container grid-item (inline-size > 35ch) {
  @container (inline-size > 35ch) {
    // :where(#{$card-component-selectors}) {
    //   &:not([class*="card--side"]) {
    //     grid-auto-flow: column;
    //     align-items: flex-start;
    //     justify-content: start;
    //     aspect-ratio: unset;

    //     &:has(#{$card-picture-selectors}) {
    //       grid-auto-flow: row;
    //       grid-auto-rows: max-content;
    //       // grid-template-columns: 1fr;
    //     }
    //   }
    // }

    // :where(#{$card-picture-selectors}) {
    //   order: -1;
    //   img {
    //     width: 100%;
    //   }
    // }
  }

  @mixin card-two-column-layout() {
    --card-columns: var(--card-two-columns);
    --card-gap: calc(var(--card-p) * 2);
    grid-auto-flow: column;
  }

  /// Fixed column layout
  :where(#{$card-component-selectors}):is([class*="card--side"]):has(
      #{$card-picture-selectors}
    ) {
    @include card-two-column-layout();
  }

  @for $i from 1 through length(str-explode($card-picture-selectors, ", ")) {
    $selectors: str-explode($card-picture-selectors, ", ");
    $selector: nth($selectors, $i);
    :where(#{$card-component-selectors}):is([class*="card--side"]):has(
        #{$selector}:is(empty)
      ) {
      --card-columns: 1fr;
    }
  }

  :where(#{$card-component-selectors}):is([class*="card--side"]):has(
      :is(#{$card-picture-selectors}):first-child + :is(#{$card-body-selectors})
    ) {
    --card-left-col: 0.6fr;
    --card-right-col: 0.4fr;
  }

  :where(#{$card-component-selectors}):is([class*="card--side"]):has(
      :is(#{$card-picture-selectors}):is(
          [data-card-picture-aspect-column="square"]
        ):first-child
        + :is(#{$card-body-selectors})
    ) {
    --card-left-col: 0.5fr;
    --card-right-col: 0.5fr;
  }

  :where(#{$card-component-selectors}):is([class*="card--side"]):has(
      :is(#{$card-body-selectors}):first-child + :is(#{$card-picture-selectors})
    ) {
    --card-left-col: 0.4fr;
    --card-right-col: 0.6fr;
    // grid-template-columns: 0.4fr 0.6fr;
  }

  :where(#{$card-component-selectors}):is([class*="card--side"]):has(
      :is(#{$card-body-selectors}):first-child
        + :is(#{$card-picture-selectors}):is(
          [data-card-picture-aspect-column="square"]
        )
    ) {
    --card-left-col: 0.5fr;
    --card-right-col: 0.5fr;
  }

  // @container grid-item (inline-size > 80ch) {
  @container (inline-size > 80ch) {
    :where(#{$card-component-selectors}):not([class*="card--side"]):has(
        #{$card-picture-selectors}
      ) {
      @include card-two-column-layout();
    }

    @for $i from 1 through length(str-explode($card-picture-selectors, ", ")) {
      $selectors: str-explode($card-picture-selectors, ", ");
      $selector: nth($selectors, $i);
      :where(#{$card-component-selectors}):not([class*="card--side"]):has(
          #{$selector}:is(:empty)
        ) {
        --card-columns: 1fr;
      }
    }

    :where(#{$card-component-selectors}):not([class*="card--side"]):has(
        :is(#{$card-picture-selectors}):first-child
          + :is(#{$card-body-selectors})
      ) {
      --card-left-col: 0.6fr;
      --card-right-col: 0.4fr;
    }

    :where(#{$card-component-selectors}):not([class*="card--side"]):has(
        :is(#{$card-picture-selectors}):is(
            [data-card-picture-aspect-column="square"]
          ):first-child
          + :is(#{$card-body-selectors})
      ) {
      --card-left-col: 0.5fr;
      --card-right-col: 0.5fr;
    }

    :where(#{$card-component-selectors}):not([class*="card--side"]):has(
        :is(#{$card-body-selectors}):first-child
          + :is(#{$card-picture-selectors})
      ) {
      --card-left-col: 0.4fr;
      --card-right-col: 0.6fr;
      // grid-template-columns: 0.4fr 0.6fr;
    }

    :where(#{$card-component-selectors}):not([class*="card--side"]):has(
        :is(#{$card-body-selectors}):first-child
          + :is(#{$card-picture-selectors}):is(
            [data-card-picture-aspect-column="square"]
          )
      ) {
      --card-left-col: 0.5fr;
      --card-right-col: 0.5fr;
    }

    :where(#{$card-picture-selectors}) {
      order: initial;
    }

    //// reverse order for columns
    :where(#{$card-component-selectors}):is(
        [data-card-reverse-order-column="true"]
      ) {
      #{$card-picture-selectors} {
        order: 2;
      }
    }
  }

  :is(#{$card-component-selectors}) {
    &.card--stacked {
      @include card.stacked();
    }
  }

  :where(#{$card-footer-selectors}) {
    max-width: max-content;
  }

  /// Card layout variations
  :where(
      [data-slice-variation="cardRow8"],
      [data-slice-variation="cardRow9"],
      [data-slice-variation="cardRow10"],
      [data-slice-variation="cardRow11"],
      [data-slice-variation="cardRow13"],
      [data-slice-variation="cardRow14"],
      [data-slice-variation="cardRow16"],
      [data-slice-variation="cardRow17"],
      [data-slice-variation="cardRow18"]
    ) {
    @container (inline-size > 80ch) {
      // make mixin for this
      .layout-grid {
        grid-auto-flow: dense;
      }
    }
  }
  :where(
      [data-slice-variation="cardRow8"],
      [data-slice-variation="cardRow10"]
    ) {
    @container (inline-size > 80ch) {
      // make mixin for this
      .layout-grid {
        > div {
          &:nth-child(6n + 2) {
            grid-row: span 2;
          }
          &:nth-child(6n + 5) {
            grid-column: 2/2;
            grid-row: span 2;
          }
        }
      }
    }
  }

  :where(
      [data-slice-variation="cardRow9"],
      [data-slice-variation="cardRow11"]
    ) {
    @container (inline-size > 80ch) {
      // make mixin for this
      .layout-grid {
        > div {
          &:nth-child(6n + 1) {
            grid-row: span 2;
          }
          &:nth-child(6n + 4) {
            grid-column: 2/2;
            grid-row: span 2;
          }
        }
      }
    }
  }

  :where(
      [data-slice-variation="cardRow12"],
      [data-slice-variation="cardRow14"],
      [data-slice-variation="cardRow16"]
    ) {
    @container (inline-size > 80ch) {
      // make mixin for this
      .layout-grid {
        > div {
          &:nth-child(6n + 1) {
            grid-column: span 2;
          }
        }
      }
    }
  }

  [data-slice-variation="cardRow13"] {
    @container (inline-size > 80ch) {
      // make mixin for this
      .layout-grid {
        > div {
          &:nth-child(6n + 3) {
            grid-column: span 2;
          }
        }
      }
    }
  }

  [data-slice-variation="cardRow17"] {
    @container (inline-size > 80ch) {
      // make mixin for this
      .layout-grid {
        > div {
          &:nth-child(6n + 1) {
            grid-column: span 2;
            grid-row: span 2;
          }
        }
      }
    }
  }

  [data-slice-variation="cardRow18"] {
    @container (inline-size > 80ch) {
      // make mixin for this
      .layout-grid {
        > div {
          &:nth-child(5) {
            grid-row: -1 / span 2;
            grid-column: -3 / span 2;
          }

          &:nth-child(5n + 1),
          &:nth-child(5n + 2),
          &:nth-child(5n + 3),
          &:nth-child(5n + 4) {
            grid-column: auto;
            grid-row: auto;
          }
          &:nth-child(10n + 6) {
            grid-column: 1 / span 2;
            grid-row: span 2;
          }
          &:nth-child(10n + 7) {
            grid-row: 5 / span 2;
            grid-column: -3 / span 2;
          }
        }
      }
    }
  }
}
